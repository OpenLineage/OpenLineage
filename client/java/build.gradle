plugins {
    id "java"
    id 'maven-publish'
    id 'application'
    id 'idea'
    id 'eclipse'
    id "org.openapi.generator" version "5.0.1"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    jackson_version = "2.12.0"
}

configurations {
    codeGenerator
}

dependencies {
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    codeGenerator project(':generator')
    testImplementation 'junit:junit:4.13'
}


def gitBranchName() {
    def branch = "unknown_branch"
    def proc = "git rev-parse HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

task generateCode(type: JavaExec) {
    description 'generate java code from spec. Use -PgenerateFromLocal to generate from the local file instead of the published version'
    classpath configurations.codeGenerator
    main = 'io.openlineage.client.Generator'
    if (project.hasProperty('generateFromLocal')) { 
      args
    } else { 
      args "https://raw.githubusercontent.com/OpenLineage/OpenLineage/" + gitBranchName()  + "/spec/OpenLineage.json"
    }
}

openApiGenerate {
// openapi-generator generate -i spec/OpenLineage.yml -g html2 -o ../OpenLineage.github.io/
    generatorName = "html2"
    inputSpec = "$rootDir/../../spec/OpenLineage.yml".toString()
    outputDir = "$buildDir/docs".toString()
}

compileJava.dependsOn tasks.generateCode, tasks.openApiGenerate
