/*
/* Copyright 2018-2024 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

import org.apache.tools.ant.filters.*

group = "io.openlineage"

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = false
}

pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    assertjVersion = '3.26.3'
    junit5Version = '5.10.3'
    lombokVersion = '1.18.34'
    mockitoVersion = '5.2.0'
    micrometerVersion = '1.13.2'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
    guavaVersion = '33.2.1-jre'
}

dependencies {
    compileOnly(rootProject)
    compileOnly("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    compileOnly("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compileOnly("org.slf4j:slf4j-api:1.7.36")

    annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")

    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.google.guava:guava:${guavaVersion}"
}

configurations {
    testImplementation.extendsFrom compileOnly
}

compileJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


task sourceJar(type: Jar) {
    archiveClassifier='sources'
    from sourceSets.main.allJava
}

javadoc {
    dependsOn delombok
    failOnError = true

    options.addBooleanOption("Xdoclint:-missing", true)

    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener
    doFirst {
        logging.addStandardErrorListener(listener)
        logging.addStandardOutputListener(listener)
    }
    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        capturedOutput.each { e ->
            if(e.toString() =~ " warning: ") {
                throw new GradleException("You have some javadoc warnings, please fix them!");
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier='javadoc'
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()
}

shadowJar {
    dependsOn test

    dependencies {
        exclude 'android/**'
        exclude 'javax/**'
    }

    mergeServiceFiles()

    archiveClassifier = ''
    // avoid conflict with any client version of that lib
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = artifactId

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = artifactId
                description = projectDescription
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

jar {
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**'
        }
        googleJavaFormat()
        removeUnusedImports()
    }
}

def reportsDir = "${getLayout().getBuildDirectory()}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.12'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}
