openapi: 3.0.2
info:
  title: OpenLineage
  version: 0.0.1
  description: OpenLineage is an open source **lineage and metadata collection API** for the data ecosystem.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /lineage:
    post:
      summary: Send an event related to the state of a run
      description: Updates a run state for a job.
      operationId: postRunStateUpdate
      tags:
        - OpenLineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunStateUpdate'
      responses:
        '200':
          description: OK

components:
  schemas:
    RunStateUpdate:
      type: object
      properties:
        eventType:
          description: the current transition of the run state. It is required to issue 1 START event and 1 of [ COMPLETE, ABORT, FAIL ] event per run. Additional events with OTHER eventType can be added to the same run. For example to send additional metadata after the run is complete
          type: string
          enum: [START, COMPLETE, ABORT, FAIL, OTHER]
          example: 'START|COMPLETE|ABORT|FAIL|OTHER'
        eventTime:
          description: the time the event occured at
          type: string
          format: date-time
        run:
          $ref: '#/components/schemas/Run'
        job:
          $ref: '#/components/schemas/Job'
        inputs:
          description: The set of **input** datasets.
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
        outputs:
          description: The set of **output** datasets.
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
        producer:
          description: URI identifying the producer of this metadata. For example this could be a git url with a given tag or sha
          type: string
          format: uri
          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client
      required:
        - run
        - job
        - eventTime
        - producer

    Run:
      type: object
      properties:
        runId:
          description: The id of the run, unique relative to the job
          type: string
        facets:
          description: The run facets.
          type: object
          properties:
            nominalTime:
              $ref: '#/components/schemas/NominalTimeRunFacet'
            parent:
              $ref: '#/components/schemas/ParentRunFacet'
          additionalProperties:
            $ref: '#/components/schemas/CustomFacet'
      required:
        - runId

    Job:
      type: object
      properties:
        namespace:
          description: The namespace containing that job
          type: string
          example: "my-scheduler-namespace"
        name:
          description: The unique name for that job within that namespace
          type: string
          example: "myjob.mytask"
        facets:
          description: The job facets.
          type: object
          properties:
            documentation:
              $ref: '#/components/schemas/DocumentationJobFacet'
            sourceCodeLocation:
              $ref: '#/components/schemas/SourceCodeLocationJobFacet'
            sql:
              $ref: '#/components/schemas/SQLJobFacet'
          additionalProperties:
            $ref: '#/components/schemas/CustomFacet'
      required:
        - namespace
        - name

    Dataset:
      type: object
      properties:
        namespace:
          description: The namespace containing that dataset
          type: string
          example: "my-datasource-namespace"
        name:
          description: The unique name for that dataset within that namespace
          type: string
          example: "instance.schema.table"
        facets:
          description: The facets for this dataset
          type: object
          properties:
            documentation:
              $ref: '#/components/schemas/DocumentationDatasetFacet'
            schema:
              $ref: '#/components/schemas/SchemaDatasetFacet'
            dataSource:
              $ref: '#/components/schemas/DatasourceDatasetFacet'
          additionalProperties:
            $ref: '#/components/schemas/CustomFacet'
      required:
       - namespace
       - name

# Base Facet

    BaseFacet:
      description: all fields of the base facet are prefixed with _ to avoid name conflicts in facets
      type: object
      properties:
        _producer:
          description: URI identifying the producer of this metadata. For example this could be a git url with a given tag or sha
          type: string
          format: uri
          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client
        _schemaURL:
          description: The URL to the corresponding version of the schema definition following a $ref URL Reference (see https://swagger.io/docs/specification/using-ref/)
          type: string
          format: uri
          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.yml#MyCustomJobFacet
      required:
        - _producer
        - _schemaURL

# Custom facets
    CustomFacet:
      description: a Custom Facet is defined is a separate spec. field must not start with _
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          additionalProperties: true

## Run Facets
    NominalTimeRunFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            nominalStartTime:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time (included) of the run. AKA the schedule time
              type: string
              format: date-time
              example: "2020-12-17T03:00:00.000Z"
            nominalEndTime:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time (excluded) of the run. (Should be the nominal start time of the next run)
              type: string
              format: date-time
              example: "2020-12-17T04:00:00.000Z"
          required:
            - nominalStartTime

    ParentRunFacet:
      description: the id of the parent run and job, iff this run was spawn from an other run (for example, the Dag run scheduling its tasks)
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            run:
              type: object
              properties:
                runId:
                  type: string
              required:
                - runId
            job:
              properties:
                namespace:
                  description: The namespace containing that job
                  type: string
                  example: "my-scheduler-namespace"
                name:
                  description: The unique name for that job within that namespace
                  type: string
                  example: "myjob.mytask"
              required:
                - namespace
                - name
          required:
            - run
            - job

## Job Facets
    DocumentationJobFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            description:
              description: The description of the job.
              type: string
          required:
            - description

    SourceCodeLocationJobFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            type:
              type: string
              example: git
            url:
              type: string
              format: uri

    SQLJobFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            query:
              type: string
              example: SELECT * FROM foo
          required:
            - query

## Dataset facets
    DocumentationDatasetFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            description:
              description: The description of the dataset.
              type: string
              example: "canonical representation of entity Foo"
          required:
            - description

    SchemaDatasetFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            fields:
              description: The fields of the table.
              type: array
              items:
                type: object
                properties:
                  name:
                    description: The name of the field.
                    type: string
                    example: column1
                  type:
                    description: The type of the field.
                    type: string
                    example: VARCHAR|INT|...
                  description:
                    description: The description of the field.
                    type: string
                required:
                  - name
                  - type

    DatasourceDatasetFacet:
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          properties:
            name:
              type: string
            uri:
              type: string
              format: uri
