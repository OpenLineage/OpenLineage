/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

plugins {
    id 'application'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '2.1.0'
    id 'com.diffplug.spotless' version '5.1.0'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    dropwizardVersion = '2.0.28'
    jacocoVersion = '0.8.7'
    lombokVersion = '1.18.22'
    kafkaVersion = '2.8.0'
    jacksonVersion = '2.12.2'
}

dependencies {
    implementation "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    implementation "io.dropwizard:dropwizard-json-logging:${dropwizardVersion}"
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation("org.apache.kafka:kafka-clients:2.8.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
}

compileJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

mainClassName = 'io.openlineage.proxy.ProxyApp'

shadowJar {
    baseName = project.name
    classifier = ''
    version = project.version
    transform(ServiceFileTransformer)
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName)
    }
}

runShadow {
    args = ['server', 'proxy.yml']
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}

def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file(coverageDir)
    }
}
