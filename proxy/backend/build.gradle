/*
 * SPDX-License-Identifier: Apache-2.0.
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
import org.apache.tools.ant.filters.*

plugins {
    id 'application'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.adarshr.test-logger' version '2.1.0'
    id 'com.diffplug.spotless' version '5.1.0'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    reports {
        html.required = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    dropwizardVersion = '2.0.28'
    jacocoVersion = '0.8.7'
    lombokVersion = '1.18.22'
    kafkaVersion = '2.8.0'
    jacksonVersion = '2.12.2'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

dependencies {
    implementation "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    implementation "io.dropwizard:dropwizard-json-logging:${dropwizardVersion}"
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation("org.apache.kafka:kafka-clients:2.8.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
}

compileJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-proxy'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'openlineage-proxy'
                description = 'Proxy backend for OpenLineage'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = System.getenv('RELEASE_USERNAME')
                password = System.getenv('RELEASE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

mainClassName = 'io.openlineage.proxy.ProxyApp'

shadowJar {
    classifier = ''
    version = project.version
    transform(ServiceFileTransformer)
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName)
    }
}

runShadow {
    args = ['server', 'proxy.yml']
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}

def reportsDir = "${buildDir}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file(coverageDir)
    }
}
