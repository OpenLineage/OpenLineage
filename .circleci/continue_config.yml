version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.2.0
  rust: circleci/rust@1.6.0

checkout_project_root: &checkout_project_root
  # Override checkout path to project root (see: https://circleci.com/docs/2.0/configuration-reference/#checkout)
  checkout:
    path: ~/openlineage

install_python_client: &install_python_client
  run: (cd ~/openlineage/client/python && pip install . --user)

param_build_tag: &param_build_tag
  parameters:
    build_tag:
      default: ""
      type: string

commands:
  install_integration_common:
    description: "Install common integration"
    parameters:
      install_parser:
        type: boolean
        description: "Whether to install Rust SQL parser"
    steps:
      - attach_workspace:
          at: .
      - when:
          condition: << parameters.install_parser >>
          steps:
            - run: pip install target/wheels/*.whl
      - run: (cd ~/openlineage/integration/common && pip install . --user)

jobs:
  unit-test-client-python:
    working_directory: ~/openlineage/client/python
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - run: pip install -e .[dev]
      - run: python -m flake8 --extend-ignore=F401
      - run: python -m mypy --ignore-missing-imports openlineage
      - run: python -m pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-client-python:
    working_directory: ~/openlineage/client/python
    docker:
      - image: cimg/python:3.7
    parameters:
      build_tag:
        default: ""
        type: string
    steps:
      - *checkout_project_root
      - run: python setup.py egg_info -b "<< parameters.build_tag >>" sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.tar.gz
            - ./dist/*.whl

  build-client-java:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-client-java-{{ .Branch }}-{{ .Revision }}
            - v1-client-java-{{ .Branch }}
      - run: ./gradlew --no-daemon --stacktrace build
      - run: ./gradlew --no-daemon jacocoTestReport
      - run: ./gradlew --no-daemon --info check
      - run: bash <(curl -s https://codecov.io/bash)
      - run: ./gradlew javadoc
      - store_test_results:
          path: client/java/build/test-results/test
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-report
      - store_artifacts:
          path: build/reports/tests/pmd
          destination: pmd-report
      - save_cache:
          key: v1-client-java-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  release-client-java:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $SONATYPE_PASSWORD)
          export RELEASE_USERNAME=$(echo $SONATYPE_USER)

          # publish jar to maven local so it can be found by dependents
          ./gradlew publishToMavenLocal

          # Publish *.jar
          ./gradlew --no-daemon publish
      - save_cache:
          key: v1-release-client-java-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.m2

  publish-snapshot-client-java:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $ARTIFACTORY_PASSWORD)
          export RELEASE_USERNAME=$(echo $ARTIFACTORY_USERNAME)
          # Publish *.jar
          ./gradlew --no-daemon publish
      - save_cache:
          key: v1-release-client-java-snapshot-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.m2

  release-integration-spark:
    working_directory: ~/openlineage/integration/spark
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-release-client-java-{{ .Branch }}-{{ .Revision }}
            - v1-release-client-java-{{ .Branch }}
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $SONATYPE_PASSWORD)
          export RELEASE_USERNAME=$(echo $SONATYPE_USER)

          cd ../../client/java
          ./gradlew --no-daemon publishToMavenLocal
          cd -
          # Publish *.jar
          ./gradlew --no-daemon publish

  publish-snapshot-integration-spark:
    working_directory: ~/openlineage/integration/spark
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-release-client-java-snapshot-{{ .Branch }}-{{ .Revision }}
            - v1-release-client-java-snapshot-{{ .Branch }}
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $ARTIFACTORY_PASSWORD)
          export RELEASE_USERNAME=$(echo $ARTIFACTORY_USERNAME)
          cd ../../client/java
          ./gradlew --no-daemon publishToMavenLocal
          cd -
          # Publish *.jar
          ./gradlew --no-daemon publish

  build-integration-spark:
    parameters:
      spark-version:
        type: string
    working_directory: ~/openlineage/integration/spark
    machine:
      image: ubuntu-2004:current
    resource_class: large
    environment:
      TESTCONTAINERS_RYUK_DISABLED: "true"
      JDK8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-spark-{{ .Branch }}-{{ .Revision }}
            - v1-integration-spark-{{ .Branch }}
      - attach_workspace:
          at: .
      - run: |
          sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
      - run: (cd ./../../client/java/ && ./gradlew --no-daemon --stacktrace publishToMavenLocal)
      - run: ./gradlew --no-daemon --stacktrace build -Pspark.version=<< parameters.spark-version >>
      - run:
          when: on_fail
          command: cat build/test-results/test/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - run: ./gradlew --no-daemon --info check
      - run: ./gradlew javadoc
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-report
      - store_artifacts:
          path: build/reports/tests/pmd
          destination: pmd-report
      - save_cache:
          key: v1-integration-spark-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  build-integration-flink:
    working_directory: ~/openlineage/integration/flink
    docker:
      - image: cimg/openjdk:11.0
    resource_class: large
    environment:
      TESTCONTAINERS_RYUK_DISABLED: "true"
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-flink-{{ .Branch }}-{{ .Revision }}
            - v1-integration-flink-{{ .Branch }}
      - attach_workspace:
          at: .
      - run: (cd ./../../client/java/ && ./gradlew --no-daemon --stacktrace publishToMavenLocal)
      - run: ./gradlew --no-daemon --stacktrace build
      - run:
          when: on_fail
          command: cat build/test-results/test/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - run: ./gradlew javadoc
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-report
      - save_cache:
          key: v1-integration-flink-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  unit-test-integration-common:
    parameters:
      install_parser:
        type: boolean
    working_directory: ~/openlineage/integration/common
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - *install_python_client
      - when:
          condition: << parameters.install_parser >>
          steps:
            - attach_workspace:
                  at: .
            - run: pip install target/wheels/*.whl
            - run: pip install -e .[dev]
      - when:
          condition:
            not: << parameters.install_parser >>
          steps:
            - run: pip install -e .[dev_no_parser]
      - run: flake8
      - run: python -m mypy --ignore-missing-imports openlineage
      - run: pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-integration-common:
    working_directory: ~/openlineage/integration/common
    docker:
      - image: cimg/python:3.7
    <<: *param_build_tag
    steps:
      - *checkout_project_root
      - run: python setup.py egg_info -b "<< parameters.build_tag >>" sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  build-integration-sql:
    parameters:
      image:
        type: string
      resource_class:
        type: string
      run_tests:
        type: boolean
    working_directory: ~/openlineage/integration/sql
    machine:
      image: ubuntu-2004:current
    resource_class: << parameters.resource_class >>
    steps:
      - *checkout_project_root
      - run: docker run -it -v $PWD:/code << parameters.image >> bash -c 'cd /code; RUN_TESTS=<<parameters.run_tests>> bash script/build.sh'
      - persist_to_workspace:
          root: .
          paths:
            - ./target/wheels/*.whl
      - when:
          condition:
            equal: [ "quay.io/pypa/manylinux2014_x86_64", << parameters.image >> ]
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - ./target/wheels/*.tar.gz
      - store_artifacts:
          path: ./target/wheels
          destination: sql-artifacts

  build-integration-dbt:
    working_directory: ~/openlineage/integration/dbt
    docker:
      - image: cimg/python:3.7
    <<: *param_build_tag
    steps:
      - *checkout_project_root
      - run: python setup.py egg_info -b "<< parameters.build_tag >>" sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  integration-test-integration-spark:
    parameters:
      spark-version:
        type: string
    working_directory: ~/openlineage/integration/spark
    machine:
      image: ubuntu-2004:current
    resource_class: large
    environment:
      TESTCONTAINERS_RYUK_DISABLED: "true"
      JDK8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-spark-{{ .Branch }}-{{ .Revision }}
            - v1-integration-spark-{{ .Branch }}
      - run: |
          sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
      - run: (cd ./../../client/java/ && ./gradlew --no-daemon --stacktrace publishToMavenLocal)
      - run: ./gradlew --no-daemon integrationTest -Pspark.version=<< parameters.spark-version >>
      - run:
          when: on_fail
          command: cat build/test-results/integrationTest/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - store_test_results:
          path: build/test-results/integrationTest
      - store_artifacts:
          path: build/reports/tests/integrationTest
          destination: test-report
      - save_cache:
          key: v1-integration-spark-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  integration-test-integration-flink:
    working_directory: ~/openlineage/integration/flink
    machine:
      image: ubuntu-2004:current
    resource_class: large
    environment:
      TESTCONTAINERS_RYUK_DISABLED: "true"
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-flink-{{ .Branch }}-{{ .Revision }}
            - v1-integration-flink-{{ .Branch }}
      - run: (cd ./../../client/java/ && ./gradlew --no-daemon --stacktrace publishToMavenLocal)
      - run: mkdir -p /tmp/warehouse/db/sink/data && cp -R data/iceberg/db /tmp/warehouse && chmod -R 777 /tmp/warehouse
      - run: ./gradlew examples:stateful:build
      - run: ./gradlew --no-daemon integrationTest --i
      - run:
          when: on_fail
          command: cat build/test-results/integrationTest/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - store_test_results:
          path: build/test-results/integrationTest
      - store_artifacts:
          path: build/reports/tests/integrationTest
          destination: test-report
      - save_cache:
          key: v1-integration-flink-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  unit-test-integration-airflow:
    parameters:
      install_parser:
        type: boolean
      airflow-version:
        type: string
    working_directory: ~/openlineage/integration/airflow
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - *install_python_client
      - install_integration_common:
          install_parser: << parameters.install_parser >>
      - run: pip install tox mypy==0.770
      - run: python -m mypy --ignore-missing-imports openlineage
      - restore_cache:
          keys:
            - v1-toxenv-<< parameters.airflow-version >>-{{ checksum "setup.cfg" }}-{{ checksum "setup.py" }}
      - run: tox -e py3-<< parameters.airflow-version >>
      - store_test_results:
          path: test-results
      - save_cache:
          paths:
            - ./.tox
          key: v1-toxenv-<< parameters.airflow-version >>-{{ checksum "setup.cfg" }}-{{ checksum "setup.py" }}
      - run: bash <(curl -s https://codecov.io/bash)

  build-integration-airflow:
    working_directory: ~/openlineage/integration/airflow
    docker:
      - image: cimg/python:3.7
    <<: *param_build_tag
    steps:
      - *checkout_project_root
      - *install_python_client
      - install_integration_common:
          install_parser: false
      - run: python setup.py egg_info -b "<< parameters.build_tag >>" sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  integration-test-integration-airflow-1-10:
    working_directory: ~/openlineage/integration/
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - *checkout_project_root
      - gcp-cli/install
      - gcp-cli/initialize
      - run: ../.circleci/get-docker-compose.sh
      - run: cp -r ../client/python python
      - attach_workspace:
          at: .
      - run: docker build -f airflow/Dockerfile.tests -t openlineage-airflow-base .
      - run: ./airflow/tests/integration/docker/up.sh
      - store_artifacts:
          path: airflow/tests/integration/tests/airflow/logs
          destination: airflow-logs
      - store_artifacts:
          path: airflow/tests/integration/tests/events
          destination: events

  integration-test-integration-airflow:
    parameters:
      airflow-image:
        type: string
    working_directory: ~/openlineage/integration/
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - *checkout_project_root
      - gcp-cli/install
      - gcp-cli/initialize
      - run: ../.circleci/get-docker-compose.sh
      - run: cp -r ../client/python python
      - attach_workspace:
          at: .
      - run: docker build -f airflow/Dockerfile.tests -t openlineage-airflow-base .
      - run: AIRFLOW_IMAGE=<< parameters.airflow-image >> ./airflow/tests/integration/docker/up-2.sh
      - store_artifacts:
          path: airflow/tests/integration/tests/airflow/logs
          destination: airflow-logs
      - store_artifacts:
          path: airflow/tests/integration/tests/events
          destination: events

  integration-test-integration-airflow-failure:
    parameters:
        failure-type:
          type: string
    working_directory: ~/openlineage/integration/
    machine:
      image: ubuntu-2004:current
    steps:
      - *checkout_project_root
      - run: ../.circleci/get-docker-compose.sh
      - run: cp -r ../client/python python
      - attach_workspace:
          at: .
      - run: docker build -f airflow/Dockerfile.tests -t openlineage-airflow-base .
      - run: AIRFLOW_IMAGE=apache/airflow:2.3.1-python3.7 ./airflow/tests/integration/docker/up-failure.sh << parameters.failure-type >>
      - store_artifacts:
          path: airflow/tests/integration/failures/airflow/logs
          destination: airflow-logs

  unit-test-integration-dagster:
    working_directory: ~/openlineage/integration/dagster
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - *install_python_client
      - run: pip install -e .[dev]
      - run: flake8
      - run: python -m mypy --ignore-missing-imports openlineage
      - run: pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-integration-dagster:
    working_directory: ~/openlineage/integration/dagster
    docker:
      - image: cimg/python:3.7
    <<: *param_build_tag
    steps:
      - *checkout_project_root
      - *install_python_client
      - run: python setup.py egg_info -b "<< parameters.build_tag >>" sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  publish-snapshot-python:
    working_directory: ~/openlineage
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - attach_workspace:
          at: .
      - run: pip install wheel twine
      - run: mkdir -p target/wheels && cp target/wheels/* dist/
      - run: python -m twine upload --non-interactive --verbose -u $ARTIFACTORY_USERNAME -p $ARTIFACTORY_PASSWORD --repository-url https://datakin.jfrog.io/artifactory/api/pypi/pypi-public-libs-release dist/*

  release-python:
    working_directory: ~/openlineage
    docker:
      - image: cimg/python:3.7
    steps:
      - *checkout_project_root
      - attach_workspace:
          at: .
      - run: pip install wheel twine
      - run: mkdir -p target/wheels && cp target/wheels/* dist/
      - run: python -m twine upload --non-interactive --verbose --repository pypi dist/*

  publish-spec:
    working_directory: ~/openlineage
    docker:
      - image: cimg/base:2021.07
    steps:
      - *checkout_project_root
      - add_ssh_keys:
          fingerprints:
            - "1c:d1:da:e8:76:d7:f7:04:31:07:18:fd:55:ca:e1:2e"
      - run: spec/release.sh

  build-proxy-backend:
    working_directory: ~/openlineage/proxy
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-proxy-{{ .Branch }}-{{ .Revision }}
            - v1-proxy-{{ .Branch }}
      - run: ./gradlew --no-daemon --stacktrace build
      - run: ./gradlew --no-daemon jacocoTestReport
      - run: bash <(curl -s https://codecov.io/bash)
      - store_test_results:
          path: proxy/build/test-results/test
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-report
      - save_cache:
          key: v1-proxy-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  release-proxy-backend:
    working_directory: ~/openlineage/proxy
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $SONATYPE_PASSWORD)
          export RELEASE_USERNAME=$(echo $SONATYPE_USER)

          # publish jar to maven local so it can be found by dependents
          ./gradlew publishToMavenLocal

          # Publish *.jar
          ./gradlew publish

  workflow_complete:
    working_directory: ~/openlineage
    machine:
      image: ubuntu-2004:current
    steps:
      - run: echo "Complete"

workflows:
  release:
    # Only trigger CI job on release (=X.Y.Z) with possible (rcX)
    jobs:
      - release-client-java:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
          context: release
      - release-integration-spark:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
          context: release
          requires:
            - release-client-java
      - release-proxy-backend:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
          context: release
      - build-client-python:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-common:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-airflow:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-dbt:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-dagster:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-sql:
          matrix:
            alias: build-integration-sql-x86
            parameters:
              image: [
                "quay.io/pypa/manylinux2014_x86_64",
                "quay.io/pypa/manylinux2014_i686",
              ]
              resource_class: ["medium"]
              run_tests: [false]
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - build-integration-sql:
          matrix:
            alias: build-integration-sql-arm
            parameters:
              image: [
                "quay.io/pypa/manylinux2014_aarch64",
              ]
              resource_class: [ "arm.medium" ]
              run_tests: [ false ]
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - release-python:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$/
            branches:
              ignore: /.*/
          context: release
          requires:
            - build-client-python
            - build-integration-common
            - build-integration-airflow
            - build-integration-dbt
            - build-integration-dagster
            - build-integration-sql-x86
            - build-integration-sql-arm
