version: 2.1
orbs:
  gradle: circleci/gradle@2.2.0

checkout_project_root: &checkout_project_root
  # Override checkout path to project root (see: https://circleci.com/docs/2.0/configuration-reference/#checkout)
  checkout:
    path: ~/openlineage


install_integration_common: &install_integration_common
  run: (cd ~/openlineage/integration/common && pip install . --user)


install_python_client: &install_python_client
  run: (cd ~/openlineage/client/python && pip install . --user)


# Only trigger CI job on release (=X.Y.Z) with possible (rcX)
only-on-release: &only-on-release
  filters:
    tags:
      only: /^[0-9]+(\.[0-9]+){2}(-?rc[0-9]+)?$/
    branches:
      ignore: /.*/

only-on-main-without-release-tag: &only-on-main-without-release-tag
  filters:
    tags:
      ignore: /^[0-9]+(\.[0-9]+){2}(-?rc[0-9]+)?$/
    branches:
      only: main

jobs:
  test-client-python:
    working_directory: ~/openlineage/client/python
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - run: pip install --user  -r test-requirements.txt
      - run: python -m flake8 --extend-ignore=F401
      - run: python -m pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-client-python:
    working_directory: ~/openlineage/client/python
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - run: python setup.py bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.tar.gz
            - ./dist/*.whl
  build-java-client:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - run: |
          ./gradlew --no-daemon --stacktrace build

  release-java-client:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $SONATYPE_PASSWORD)
          export RELEASE_USERNAME=$(echo $SONATYPE_USER)
          # Publish *.jar
          ./gradlew publish

  publish-snapshot-java-client:
    working_directory: ~/openlineage/client/java
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $ARTIFACTORY_PASSWORD)
          export RELEASE_USERNAME=$(echo $ARTIFACTORY_USERNAME)
          # Publish *.jar
          ./gradlew publish

  release-integration-spark:
    working_directory: ~/openlineage/integration/spark
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $SONATYPE_PASSWORD)
          export RELEASE_USERNAME=$(echo $SONATYPE_USER)
          # Publish *.jar
          ./gradlew publish

  publish-snapshot-integration-spark:
    working_directory: ~/openlineage/integration/spark
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *checkout_project_root
      - run: |
          # Get, then decode the GPG private key used to sign *.jar
          export ORG_GRADLE_PROJECT_signingKey=$(echo $GPG_SIGNING_KEY | base64 -d)
          export RELEASE_PASSWORD=$(echo $ARTIFACTORY_PASSWORD)
          export RELEASE_USERNAME=$(echo $ARTIFACTORY_USERNAME)
          # Publish *.jar
          ./gradlew publish

  build-integration-spark:
    working_directory: ~/openlineage/integration/spark
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-spark-{{ .Branch }}-{{ .Revision }}
            - v1-integration-spark-{{ .Branch }}
      - run: ./gradlew --no-daemon --stacktrace build
      - run:
          when: on_fail
          command: cat integration/spark/build/test-results/test/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - store_test_results:
          path: integration/spark/build/test-results/test
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-report
      - save_cache:
          key: v1-integration-spark-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  test-integration-common:
    working_directory: ~/openlineage/integration/common
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - *install_python_client
      - run: pip install -e .[dev]
      - run: flake8
      - run: pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-integration-common:
    working_directory: ~/openlineage/integration/common
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - run: python setup.py sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  build-integration-dbt:
    working_directory: ~/openlineage/integration/dbt
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - run: python setup.py sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  integration-test-spark:
    working_directory: ~/openlineage/integration/spark
    machine: true
    environment:
      TESTCONTAINERS_RYUK_DISABLED: "true"
      JDK8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    steps:
      - *checkout_project_root
      - restore_cache:
          keys:
            - v1-integration-spark-{{ .Branch }}-{{ .Revision }}
            - v1-integration-spark-{{ .Branch }}
      - attach_workspace:
          at: .
      - run: ./gradlew --no-daemon --stacktrace integrationTest
      - run:
          when: on_fail
          command: cat integration/spark/build/test-results/integrationTests/TEST-*.xml
      - run: ./gradlew --no-daemon jacocoTestReport
      - store_test_results:
          path: integration/spark/build/test-results/integrationTests
      - store_artifacts:
          path: integration/spark/build/reports/tests/integrationTests
          destination: test-report
      - save_cache:
          key: v1-integration-spark-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.gradle

  test-integration-airflow:
    working_directory: ~/openlineage/integration/airflow
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - *install_python_client
      - *install_integration_common
      - run: pip install -e .[dev]
      - run: flake8 --exclude integration
      - run: airflow initdb
      - run: pytest --cov=openlineage tests/
      - run: bash <(curl -s https://codecov.io/bash)

  build-integration-airflow:
    working_directory: ~/openlineage/integration/airflow
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - *install_integration_common
      - run: python setup.py sdist bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/*.whl
            - ./dist/*.tar.gz

  integration-test-airflow:
    working_directory: ~/openlineage/integration/
    machine: true
    steps:
      - *checkout_project_root
      - run: ../.circleci/get-docker-compose.sh
      - run: cp -r ../client/python python
      - run: docker build -f airflow/Dockerfile.tests -t openlineage-airflow-base .
      - run: ./airflow/tests/integration/docker/up.sh

  release-python:
    working_directory: ~/openlineage
    docker:
      - image: circleci/python:3.6
    steps:
      - *checkout_project_root
      - attach_workspace:
          at: .
      - run: pip install wheel twine
      - run: python -m twine upload --non-interactive --verbose --repository pypi dist/*

workflows:
  openlineage-build:
    jobs:
      - gradle/test:
          app_src_directory: client/java
      - test-client-python
      - test-integration-common
      - build-integration-spark
      - build-java-client
      - integration-test-spark:
          requires:
            - build-integration-spark
      - test-integration-airflow
      - integration-test-airflow:
          requires:
            - test-integration-airflow

      #publish snapshots
      - publish-snapshot-java-client:
          <<: *only-on-main-without-release-tag
          context: release
          requires:
            - build-java-client
      - publish-snapshot-integration-spark:
          <<: *only-on-main-without-release-tag
          context: release
          requires:
            - integration-test-spark

  release:
    jobs:
      - build-client-python:
          <<: *only-on-release
      - build-integration-common:
          <<: *only-on-release
      - build-integration-airflow:
          <<: *only-on-release
      - build-integration-dbt:
          <<: *only-on-release
      - release-java-client:
          <<: *only-on-release
          context: release
      - release-integration-spark:
          <<: *only-on-release
          context: release
      - release-python:
          <<: *only-on-release
          context: release
          requires:
            - build-client-python
            - build-integration-common
            - build-integration-dbt
