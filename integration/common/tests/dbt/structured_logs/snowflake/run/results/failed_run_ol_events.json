[
  {
    "eventTime":"2024-12-09T14:15:37.397105Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"dbt-run-jaffle_shop",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"JOB"
        }
      }
    },
    "eventType":"START",
    "inputs":[ ],
    "outputs":[ ]
  },
  {
    "eventTime":"2024-12-09T14:15:50.533727Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "parent":{
          "run":{
            "runId":"{{ any(result) }}"
          },
          "job":{
            "namespace":"dbt-test-namespace",
            "name":"dbt-run-jaffle_shop"
          }
        },
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"model.jaffle_shop.orders",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"MODEL"
        }
      }
    },
    "eventType":"START",
    "inputs":[
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.stg_orders",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"order_id",
                "type":"",
                "description":"",
                "fields":[ ]
              },
              {
                "name":"status",
                "type":"",
                "description":"",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":""
          }
        }
      },
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.stg_payments",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"payment_id",
                "type":"",
                "description":"",
                "fields":[ ]
              },
              {
                "name":"payment_method",
                "type":"",
                "description":"",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":""
          }
        }
      }
    ],
    "outputs":[
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.orders",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"order_id",
                "type":"",
                "description":"This is a unique identifier for an order",
                "fields":[ ]
              },
              {
                "name":"customer_id",
                "type":"",
                "description":"Foreign key to the customers table",
                "fields":[ ]
              },
              {
                "name":"order_date",
                "type":"",
                "description":"Date (UTC) that the order was placed",
                "fields":[ ]
              },
              {
                "name":"status",
                "type":"",
                "description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
                "fields":[ ]
              },
              {
                "name":"amount",
                "type":"",
                "description":"Total amount (AUD) of the order",
                "fields":[ ]
              },
              {
                "name":"credit_card_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by credit card",
                "fields":[ ]
              },
              {
                "name":"coupon_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by coupon",
                "fields":[ ]
              },
              {
                "name":"bank_transfer_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by bank transfer",
                "fields":[ ]
              },
              {
                "name":"gift_card_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by gift card",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":"This table has basic information about orders, as well as some derived facts based on payments"
          }
        },
        "outputFacets":{ }
      }
    ]
  },
  {
    "eventTime":"2024-12-09T14:15:50.928152Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "parent":{
          "run":{
            "runId":"{{ any(result) }}"
          },
          "job":{
            "namespace":"dbt-test-namespace",
            "name":"model.jaffle_shop.orders"
          }
        },
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"model.jaffle_shop.orders.sql.1",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"SQL"
        },
        "sql":{
          "query":"/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.2\", \"profile_name\": \"jaffle_shop\", \"target_name\": \"snowflake\", \"node_id\": \"model.jaffle_shop.orders\"} */\ncreate or replace transient table REPORTING.TEST_GENERAL.orders\n         as\n        (\n\nwith orders as (\n\n    select * from REPORTING.TEST_GENERAL.stg_orders\n\n),\n\npayments as (\n\n    select * from REPORTING.TEST_GENERAL.stg_payments\n\n),\nlkjkjlkj\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final\n        );"
        }
      }
    },
    "eventType":"START",
    "inputs":[ ],
    "outputs":[ ]
  },
  {
    "eventTime":"2024-12-09T14:15:52.630744Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "parent":{
          "run":{
            "runId":"{{ any(result) }}"
          },
          "job":{
            "namespace":"dbt-test-namespace",
            "name":"model.jaffle_shop.orders"
          }
        },
        "errorMessage":{
          "message":"Database Error in model orders (models/orders.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 17 at position 0 unexpected 'order_payments'.\n  compiled code at target/run/jaffle_shop/models/orders.sql",
          "programmingLanguage":"sql",
          "stackTrace":"Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 290, in exception_handler\n    yield\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/sql/connections.py\", line 93, in add_query\n    cursor.execute(sql, bindings)\n  File \"/usr/local/lib/python3.10/site-packages/snowflake/connector/cursor.py\", line 1097, in execute\n    Error.errorhandler_wrapper(self.connection, self, error_class, errvalue)\n  File \"/usr/local/lib/python3.10/site-packages/snowflake/connector/errors.py\", line 284, in errorhandler_wrapper\n    handed_over = Error.hand_to_other_handler(\n  File \"/usr/local/lib/python3.10/site-packages/snowflake/connector/errors.py\", line 339, in hand_to_other_handler\n    cursor.errorhandler(connection, cursor, error_class, error_value)\n  File \"/usr/local/lib/python3.10/site-packages/snowflake/connector/errors.py\", line 215, in default_errorhandler\n    raise error_class(\nsnowflake.connector.errors.ProgrammingError: 001003 (42000): SQL compilation error:\nsyntax error line 17 at position 0 unexpected 'order_payments'.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/dbt/task/base.py\", line 368, in safe_run\n    result = self.compile_and_execute(manifest, ctx)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/task/base.py\", line 314, in compile_and_execute\n    result = self.run(ctx.node, manifest)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/task/base.py\", line 415, in run\n    return self.execute(compiled_node, manifest)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/task/run.py\", line 298, in execute\n    result = MacroGenerator(\n  File \"/usr/local/lib/python3.10/site-packages/dbt/clients/jinja.py\", line 84, in __call__\n    return self.call_macro(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt_common/clients/jinja.py\", line 322, in call_macro\n    return macro(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 768, in __call__\n    return self._invoke(arguments, autoescape)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 782, in _invoke\n    rv = self._func(*arguments)\n  File \"<template>\", line 77, in macro\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/sandbox.py\", line 394, in call\n    return __context.call(__obj, *args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 303, in call\n    return __obj(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/clients/jinja.py\", line 84, in __call__\n    return self.call_macro(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt_common/clients/jinja.py\", line 322, in call_macro\n    return macro(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 768, in __call__\n    return self._invoke(arguments, autoescape)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 782, in _invoke\n    rv = self._func(*arguments)\n  File \"<template>\", line 52, in macro\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/sandbox.py\", line 394, in call\n    return __context.call(__obj, *args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/jinja2/runtime.py\", line 303, in call\n    return __obj(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/base/impl.py\", line 390, in execute\n    return self.connections.execute(sql=sql, auto_begin=auto_begin, fetch=fetch, limit=limit)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 471, in execute\n    _, cursor = self.add_query(sql, auto_begin)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 506, in add_query\n    connection, cursor = self._add_standard_queries(\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 562, in _add_standard_queries\n    connection, cursor = self.add_standard_query(query, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 482, in add_standard_query\n    return super().add_query(self._add_query_comment(sql), **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/sql/connections.py\", line 76, in add_query\n    with self.exception_handler(sql):\n  File \"/usr/local/lib/python3.10/contextlib.py\", line 153, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/usr/local/lib/python3.10/site-packages/dbt/adapters/snowflake/connections.py\", line 316, in exception_handler\n    raise DbtDatabaseError(msg)\ndbt_common.exceptions.base.DbtDatabaseError: Database Error in model orders (models/orders.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 17 at position 0 unexpected 'order_payments'.\n  compiled code at target/run/jaffle_shop/models/orders.sql\n"
        },
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"model.jaffle_shop.orders.sql.1",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"SQL"
        },
        "sql":{
          "query":"/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.2\", \"profile_name\": \"jaffle_shop\", \"target_name\": \"snowflake\", \"node_id\": \"model.jaffle_shop.orders\"} */\ncreate or replace transient table REPORTING.TEST_GENERAL.orders\n         as\n        (\n\nwith orders as (\n\n    select * from REPORTING.TEST_GENERAL.stg_orders\n\n),\n\npayments as (\n\n    select * from REPORTING.TEST_GENERAL.stg_payments\n\n),\nlkjkjlkj\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final\n        );"
        }
      }
    },
    "eventType":"FAIL",
    "inputs":[ ],
    "outputs":[ ]
  },
  {
    "eventTime":"2024-12-09T14:15:52.649490Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "parent":{
          "run":{
            "runId":"{{ any(result) }}"
          },
          "job":{
            "namespace":"dbt-test-namespace",
            "name":"dbt-run-jaffle_shop"
          }
        },
        "errorMessage":{
          "message":"Database Error in model orders (models/orders.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 17 at position 0 unexpected 'order_payments'.\n  compiled code at target/run/jaffle_shop/models/orders.sql",
          "programmingLanguage":"sql",
          "stackTrace":null
        },
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"model.jaffle_shop.orders",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"MODEL"
        }
      }
    },
    "eventType":"FAIL",
    "inputs":[
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.stg_orders",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"order_id",
                "type":"",
                "description":"",
                "fields":[ ]
              },
              {
                "name":"status",
                "type":"",
                "description":"",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":""
          }
        }
      },
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.stg_payments",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"payment_id",
                "type":"",
                "description":"",
                "fields":[ ]
              },
              {
                "name":"payment_method",
                "type":"",
                "description":"",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":""
          }
        }
      }
    ],
    "outputs":[
      {
        "namespace":"snowflake://mysnowflakeaccount.us-east-1.aws",
        "name":"REPORTING.TEST_GENERAL.orders",
        "facets":{
          "dataSource":{
            "name":"snowflake://mysnowflakeaccount.us-east-1.aws",
            "uri":"snowflake://mysnowflakeaccount.us-east-1.aws"
          },
          "schema":{
            "fields":[
              {
                "name":"order_id",
                "type":"",
                "description":"This is a unique identifier for an order",
                "fields":[ ]
              },
              {
                "name":"customer_id",
                "type":"",
                "description":"Foreign key to the customers table",
                "fields":[ ]
              },
              {
                "name":"order_date",
                "type":"",
                "description":"Date (UTC) that the order was placed",
                "fields":[ ]
              },
              {
                "name":"status",
                "type":"",
                "description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
                "fields":[ ]
              },
              {
                "name":"amount",
                "type":"",
                "description":"Total amount (AUD) of the order",
                "fields":[ ]
              },
              {
                "name":"credit_card_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by credit card",
                "fields":[ ]
              },
              {
                "name":"coupon_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by coupon",
                "fields":[ ]
              },
              {
                "name":"bank_transfer_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by bank transfer",
                "fields":[ ]
              },
              {
                "name":"gift_card_amount",
                "type":"",
                "description":"Amount of the order (AUD) paid for by gift card",
                "fields":[ ]
              }
            ]
          },
          "documentation":{
            "description":"This table has basic information about orders, as well as some derived facts based on payments"
          }
        },
        "outputFacets":{ }
      }
    ]
  },
  {
    "eventTime":"2024-12-09T14:15:53.397367Z",
    "run":{
      "runId":"{{ any(result) }}",
      "facets":{
        "errorMessage":{
          "message":"Command `dbt run` failed at 14:15:53.397367 after 16.35 seconds",
          "programmingLanguage":"sql",
          "stackTrace":null
        },
        "dbt_version": {
          "version": "1.8.2"
        }
      }
    },
    "job":{
      "namespace":"dbt-test-namespace",
      "name":"dbt-run-jaffle_shop",
      "facets":{
        "jobType":{
          "processingType":"BATCH",
          "integration":"DBT",
          "jobType":"JOB"
        }
      }
    },
    "eventType":"FAIL",
    "inputs":[ ],
    "outputs":[ ]
  }
]