/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.13.0'
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'jacoco'
    id 'pmd'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'io.openlineage'
archivesBaseName = "hive-udf-interfaces"

ext {
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
}


pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = false
}
pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

compileJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        target("src/**/*.java")
        googleJavaFormat()
        removeUnusedImports()
        licenseHeader("""/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/""")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "io.openlineage"
            artifactId = "hive-udf-interfaces"

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = "hive-udf-interfaces"
                description = "OpenLineage Interfaces for Hive UDFs"
                url = "https://github.com/OpenLineage/OpenLineage"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "openlineage"
                        name = "OpenLineage Project"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/OpenLineage/OpenLineage.git"
                    developerConnection = "scm:git:ssh://github.com:OpenLineage/OpenLineage.git"
                    url = "https://github.com/OpenLineage/OpenLineage"
                }
            }

            pom.withXml {
                asNode().dependencies."*".findAll() {
                    it.groupId.text() == "hive"
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('RELEASE_USERNAME')
            password = System.getenv('RELEASE_PASSWORD')
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}