import org.apache.tools.ant.filters.ReplaceTokens
import groovy.io.FileType

import java.nio.file.Files

plugins {
    id 'scala'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.diffplug.spotless' version '6.12.0'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    dependsOn shadowJar
            reports {
                html.required = true
            }
}

pmdTest {
    dependsOn shadowJar
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    isReleaseVersion = !version.endsWith('SNAPSHOT')
    scala = project.findProperty("scala.binary.version").toString()
    scalaLibrary = scala == "2.13" ? "2.13.13" : "2.12.19"
}

dependencies {
    api "io.openlineage:openlineage-java:${project.version}"
    compileOnly "org.scala-lang:scala-library:${scalaLibrary}"
    testImplementation 'org.scalatest:scalatest_${project.scalaVersion}:3.0.0'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala']
        }
    }
    test {
        scala {
            srcDirs = ['test/main/scala']
        }
    }
}

task sourceJar(type: Jar) {
    archiveClassifier='sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier='javadoc'
    from javadoc.destinationDir
}

spotless {
    def disallowWildcardImports = {
        String text = it
                def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    scala {
        scalafmt()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

assemble {
    dependsOn shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = "spark-interfaces-scala_${scala}"

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = "spark-interfaces-scala_${scala}"
                description = 'OpenLineage Spark interfaces'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.groupId.text() == 'spark'
                }.each() {
                    it.parent().remove(it)
                }
            }

        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = isReleaseVersion ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2' :
                    'https://astronomer.jfrog.io/artifactory/maven-public-libs-snapshot'
            credentials {
                username = System.getenv('RELEASE_USERNAME')
                password = System.getenv('RELEASE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

archivesBaseName="spark-interfaces-scala_${scala}"

shadowJar {
    dependsOn test

    dependencies {
        exclude 'com/fasterxml/**'
        exclude 'org/slf4j/**'
        exclude 'org/yaml/**'
        exclude 'org/apache/**'
        exclude 'io/openlineage/client/OpenlineageClient**'
        exclude 'io/openlineage/client/OpenlineageYaml**'
        exclude 'io/openlineage/client/circuitBreaker**'
        exclude 'io/openlineage/client/transports/**'
        exclude 'io/openlineage/client/utils**'
    }
    archiveClassifier = ''
    // avoid conflict with any client version of that lib
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}