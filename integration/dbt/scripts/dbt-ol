#!/usr/bin/env python
import subprocess
import sys
import time
import os
from typing import Optional

from tqdm import tqdm
from openlineage.common.provider.dbt import DbtArtifactProcessor
from openlineage.client.client import OpenLineageClient, OpenLineageClientOptions

__version__ = "0.2.3"

from openlineage.common.utils import parse_single_arg

PRODUCER = f'https://github.com/OpenLineage/OpenLineage/tree/{__version__}/integration/dbt'


def setup_client() -> Optional[OpenLineageClient]:
    url = os.getenv("OPENLINEAGE_URL")
    if not url:
        return None
    return OpenLineageClient(
        url=url,
        options=OpenLineageClientOptions(
            api_key=os.getenv("OPENLINEAGE_API_KEY", None)
        )
    )


def main():
    print(f"Running OpenLineage dbt wrapper version {__version__}")
    print(f"This wrapper will send OpenLineage events at the end of dbt execution.")

    args = sys.argv[2:]
    target = parse_single_arg(args, ['-t', '--target'])
    project_dir = parse_single_arg(args, ['--project-dir'], default='./')
    profile_name = parse_single_arg(args, ['--profile'])

    client = setup_client()
    if client is None:
        print("OPENLINEAGE_URL is not set: stopping execution")
        sys.exit(1)

    processor = DbtArtifactProcessor(
        producer=PRODUCER,
        target=target,
        project_dir=project_dir,
        profile_name=profile_name
    )

    pre_run_time = time.time()
    process = subprocess.Popen(
        ["dbt"] + sys.argv[1:],
        stdout=sys.stdout,
        stderr=sys.stderr
    )
    process.wait()

    if len(sys.argv) < 2 or sys.argv[1] not in ['run', 'test']:
        return

    # If run_result has modification time before dbt command
    # or does not exist, do not emit dbt events.
    try:
        if os.stat(processor.run_result_path).st_mtime < pre_run_time:
            print(f"OpenLineage events not emittled: run_result file "
                  f"({processor.run_result_path}) was not modified by dbt")
            return
    except FileNotFoundError:
        print(f"OpenLineage events not emittled:"
              f"did not find run_result file ({processor.run_result_path})")
        return

    events = processor.parse().events()

    for event in tqdm(events, desc="Emitting OpenLineage events"):
        client.emit(event)
    print(f"Emitted {len(events)} OpenLineage events")


if __name__ == '__main__':
    main()
