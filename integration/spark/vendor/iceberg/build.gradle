plugins {
    id("java-library")
    id("com.diffplug.spotless")
    id("io.freefair.lombok")
    id("io.openlineage.common-config")
    id("idea")
}

ext {
    assertjVersion = '3.25.1'
    junit5Version = '5.10.1'
    mockitoVersion = '4.11.0'
    lombokVersion = '1.18.30'
    mockserverVersion = "5.14.0"

    icebergLookup = [
            '3.2.4': '0.14.1',
            '3.3.4': '1.4.3',
            '3.4.2': '1.4.3',
    ]
    notSupportedVersions = ['2.4.8', '3.1.3', '3.5.0']

    spark = project.findProperty('spark.version').toString()

    series = spark.substring(0, 3)
    scala = project.findProperty('scala.binary.version').toString()
    scalaFmt = scala.replace(".", "")

    icebergVersion = icebergLookup[spark]

    activeRuntimeElementsConfiguration = "scala${scalaFmt}RuntimeElements"
    compilationMatrix = [
            'spark33': [sourceSet: 'spark33+',
                        sparkSeries: '3.3', spark: '3.3.4', scala: scala,
                        iceberg: '1.4.3'],


    ]
}
if (spark in notSupportedVersions) {
    tasks.getByName("compileJava") {
        enabled = false
    }
    tasks.getByName("compileTestJava") {
        enabled = false
    }
    tasks.getByName("test") {
        enabled = false
    }
}

compilationMatrix.each { key, value ->
    sourceSets.create(key) {
        java {
            srcDir("src/main${value.sourceSet.capitalize()}/java")
        }
        resources {
            srcDir("src/main${value.sourceSet.capitalize()}/resources")
        }
    }
    sourceSets.create("test${key.capitalize()}") {
        compileClasspath += sourceSets."${key}".output
        runtimeClasspath += sourceSets."${key}".output
        java {
            srcDir("src/test${value.sourceSet.capitalize()}/java")
        }
        resources {
            srcDir("src/test${value.sourceSet.capitalize()}/resources")
        }
    }

    configurations {
        named("test${key.capitalize()}Implementation") {
            extendsFrom(named("${key}CompileOnly").get())
        }
    }
    dependencies {
        "${key}CompileOnly"("org.projectlombok:lombok:${lombokVersion}")
        "${key}Implementation"(project(path: ":shared", configuration: activeRuntimeElementsConfiguration))
        "${key}Implementation"(project(":spark3"))
        "${key}CompileOnly"("org.apache.spark:spark-sql_${value.scala}:${value.spark}")
        "${key}CompileOnly"("org.apache.iceberg:iceberg-spark-runtime-${value.sparkSeries}_${value.scala}:${value.iceberg}")

        "test${key.capitalize()}Implementation"(project(":shared"))
        "test${key.capitalize()}Implementation"(project(":spark3"))
        "test${key.capitalize()}CompileOnly" "org.projectlombok:lombok:${lombokVersion}"

        "test${key.capitalize()}Implementation"(platform("org.junit:junit-bom:${junit5Version}"))
        "test${key.capitalize()}Implementation"("org.junit.jupiter:junit-jupiter")
        "test${key.capitalize()}Implementation"("org.junit.jupiter:junit-jupiter-params")

        "test${key.capitalize()}Implementation"("org.assertj:assertj-core:${assertjVersion}")
        "test${key.capitalize()}Implementation"("org.mockito:mockito-core:${mockitoVersion}")
        "test${key.capitalize()}Implementation"("org.mockito:mockito-inline:${mockitoVersion}")
        "test${key.capitalize()}Implementation"("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    }

    tasks.register("test${key.capitalize()}", Test) {
        dependsOn(tasks.named("compileTest${key.capitalize()}Java"))
        description = "Runs all tests in this module using Apache Spark ${value.sparkSeries}.x " +
                "libraries compiled with Scala ${value.scala}"
        group = "verification"
        testClassesDirs = sourceSets."test${key.capitalize()}".output.classesDirs
        classpath = sourceSets."test${key.capitalize()}".runtimeClasspath
    }

}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(project(path: ":shared", configuration: activeRuntimeElementsConfiguration))
    implementation(project(":spark3"))
    compileOnly("org.apache.spark:spark-sql_${scala}:${spark}")
    compileOnly("org.apache.iceberg:iceberg-spark-runtime-${series}_${scala}:${icebergVersion}")

    // Need for ColumnLevelLineageIcebergTest#testMergeInto
    // Otherwise it throw a java.lang.NoClassDefFoundError: scala/jdk/CollectionConverters$
    testImplementation("org.scala-lang.modules:scala-collection-compat_${scala}:2.11.0")

    testImplementation(platform("org.junit:junit-bom:${junit5Version}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-params")


    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.apache.spark:spark-sql_${scala}:${spark}")
    testImplementation("org.apache.iceberg:iceberg-spark-runtime-${series}_${scala}:${icebergVersion}")
    testImplementation("org.mock-server:mockserver-client-java:${mockserverVersion}") {
        exclude(group: "com.google.guava", module: "guava")
        exclude(group: "com.fasterxml.jackson.core")
        exclude(group: "com.fasterxml.jackson.datatype")
        exclude(group: "com.fasterxml.jackson.dataformat")
    }

}


tasks.named('test', Test.class)  {
    group = "verification"
    // test task runs all tests across all Spark versions
    compilationMatrix.each { key, value ->
        dependsOn tasks.named("test${key.capitalize()}")
    }
}

tasks.named('jar', Jar.class) {
    // Compile both the main and test sources of the spark33 code
    // when building the jar
    dependsOn(tasks.named('spark33Classes'))
    from(sourceSets.named("spark33").get().output)
}