plugins {
    id("java-library")
    id("pmd")
    id("com.diffplug.spotless")
    id("io.freefair.lombok")
    id("io.openlineage.common-config")
    id("io.openlineage.scala-variants")
    id("idea")
    id("java-test-fixtures")
}

scalaVariants {
    create("2.11")
    create("2.12")
}

idea {
    module {
        testSources.from(sourceSets.testScala212.java.srcDirs)
    }
}

ext {
    assertjVersion = "3.26.3"
    deltaVersion = "1.1.0"
    icebergVersion = "0.14.1"
    jacksonVersion = "2.15.3"
    junit5Version = "5.11.3"
    mockitoVersion = "4.11.0"
    postgresqlVersion = "42.7.4"
    micrometerVersion = '1.13.6'

    sparkVersion = project.findProperty("spark2.spark.version")
    scalaBinaryVersion = "2.11"
}

dependencies {
    compileOnly(project(path: ":shared", configuration: "scala212RuntimeElements"))

    compileOnly("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("io.micrometer:micrometer-core:${micrometerVersion}")

    // TODO: Replace 'testFixturesApi' with 'testImplementation'
    // TODO: Remove the test dependency on 'shared'
    testFixturesApi(project(path: ":shared", configuration: "scala212RuntimeElements"))
    testFixturesApi("com.fasterxml.jackson.module:jackson-module-scala_${scalaBinaryVersion}:${jacksonVersion}")
    testFixturesApi("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkVersion}")
    testFixturesApi("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}")
    testFixturesApi("org.assertj:assertj-core:${assertjVersion}")
    testFixturesApi("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testFixturesApi("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testFixturesApi("org.mockito:mockito-core:${mockitoVersion}")
    testFixturesApi("org.mockito:mockito-inline:${mockitoVersion}")
    testFixturesApi("org.postgresql:postgresql:${postgresqlVersion}")
    testFixturesApi("io.micrometer:micrometer-core:${micrometerVersion}")

    // Scala 2.11
    // This is intentionally left as 'scala212RuntimeElements' because the 'shared' project
    // only has Scala 2.12 and 2.13 variants. Because this project is written in Java, this should
    // not be a problem.
    scala211CompileOnly(project(path: ":shared", configuration: "scala212RuntimeElements"))

    scala211CompileOnly("org.apache.spark:spark-sql_2.11:${sparkVersion}")
    scala211CompileOnly("io.micrometer:micrometer-core:${micrometerVersion}")

    testScala211Implementation(project(path: ":shared", configuration: "scala212RuntimeElements"))
    testScala211Implementation("com.fasterxml.jackson.module:jackson-module-scala_2.11:${jacksonVersion}")
    testScala211Implementation("org.apache.spark:spark-hive_2.11:${sparkVersion}")
    testScala211Implementation("org.apache.spark:spark-sql_2.11:${sparkVersion}")
    testScala211Implementation("org.assertj:assertj-core:${assertjVersion}")
    testScala211Implementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testScala211Implementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testScala211Implementation("org.mockito:mockito-core:${mockitoVersion}")
    testScala211Implementation("org.mockito:mockito-inline:${mockitoVersion}")
    testScala211Implementation("org.postgresql:postgresql:${postgresqlVersion}")
    testScala211Implementation("io.micrometer:micrometer-core:${micrometerVersion}")

    // Scala 2.12
    scala212CompileOnly(project(path: ":shared", configuration: "scala212RuntimeElements"))

    scala212CompileOnly("org.apache.spark:spark-sql_2.12:${sparkVersion}")
    scala212CompileOnly("io.micrometer:micrometer-core:${micrometerVersion}")

    testScala212Implementation(project(path: ":shared", configuration: "scala212RuntimeElements"))
    testScala212Implementation("com.fasterxml.jackson.module:jackson-module-scala_2.12:${jacksonVersion}")
    testScala212Implementation("org.apache.spark:spark-hive_2.12:${sparkVersion}")
    testScala212Implementation("org.apache.spark:spark-sql_2.12:${sparkVersion}")
    testScala212Implementation("org.assertj:assertj-core:${assertjVersion}")
    testScala212Implementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testScala212Implementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testScala212Implementation("org.mockito:mockito-core:${mockitoVersion}")
    testScala212Implementation("org.mockito:mockito-inline:${mockitoVersion}")
    testScala212Implementation("org.postgresql:postgresql:${postgresqlVersion}")
    testScala212Implementation("io.micrometer:micrometer-core:${micrometerVersion}")
}
