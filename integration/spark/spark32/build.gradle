import org.apache.tools.ant.filters.ReplaceTokens
import groovy.io.FileType

import java.nio.file.Files


plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'com.diffplug.spotless' version '5.12.1'
    id "com.adarshr.test-logger" version "2.1.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://datakin.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

archivesBaseName='openlineage-spark-spark3'

ext {
    assertjVersion = '3.20.2'
    bigqueryVersion = '0.21.1'
    junit5Version = '5.7.2'
    sparkVersion = '3.2.1'
    jacksonVersion = '2.10.0'
    postgresqlVersion = '42.2.19'
    lombokVersion = '1.18.20'
    mockitoVersion = '3.11.2'
    testcontainersVersion = '1.15.3'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(project(":shared"))

    compileOnly "com.google.cloud.spark:spark-bigquery_2.12:${bigqueryVersion}"
    compileOnly "com.google.cloud.spark:spark-bigquery-with-dependencies_2.12:${bigqueryVersion}"
    compileOnly "org.apache.spark:spark-core_2.12:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql_2.12:${sparkVersion}"
    compileOnly "org.apache.spark:spark-hive_2.12:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql-kafka-0-10_2.12:${sparkVersion}"
    compileOnly "org.apache.iceberg:iceberg-spark3-runtime:0.12.1"
    compileOnly "io.delta:delta-core_2.12:1.0.0"
    compileOnly "com.databricks:dbutils-api_2.12:0.0.5"

    testFixturesApi "com.fasterxml.jackson.module:jackson-module-scala_2.12:${jacksonVersion}"
    testFixturesApi "org.apache.spark:spark-core_2.12:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-sql_2.12:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-hive_2.12:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-catalyst_2.12:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-sql-kafka-0-10_2.12:${sparkVersion}"
    testFixturesApi "org.apache.iceberg:iceberg-spark3-runtime:0.12.1"
    testFixturesApi "io.delta:delta-core_2.12:1.0.0"
    testFixturesApi "com.databricks:dbutils-api_2.12:0.0.5"
    testFixturesApi "com.google.cloud.spark:spark-bigquery-with-dependencies_2.12:${bigqueryVersion}"
    testImplementation(testFixtures(project(":shared")))
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 5
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            'spark.version'                       : '3.1.2',
            'openlineage.spark.jar'               : "${archivesBaseName}-${project.version}.jar",
            'kafka.package.version'               : 'org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2',
            'mockserver.logLevel'                 : 'ERROR'
    ]

    classpath = project.sourceSets.test.runtimeClasspath
}


test {
    configure commonTestConfiguration
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

task integrationTest(type: Test) {
    configure commonTestConfiguration
    useJUnitPlatform {
        includeTags "integration-test"
    }
}

assemble {
    dependsOn shadowJar
}


shadowJar {
    minimize()
    classifier = ''
    dependencies {
        exclude(dependency('org.slf4j::'))
    }
    zip64 true
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}