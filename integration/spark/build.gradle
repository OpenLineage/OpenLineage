import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "com.adarshr.test-logger" version "3.2.0"
    id "org.gradle.test-retry" version "1.5.3"
    id 'com.diffplug.spotless' version '6.12.0'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

subprojects {
    apply plugin: 'java'

    ext {
        lombokVersion = '1.18.28'
        isReleaseVersion = !version.endsWith('SNAPSHOT')
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://astronomer.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

archivesBaseName='openlineage-spark'

ext {
    lombokVersion = '1.18.20'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
    jacksonVersion = "2.13.2"
    jacksonDatabindVersion = "2.13.2.2"
}

dependencies {
    implementation(project(path:    ":app"))
    implementation(project(path: ":shared"))
    implementation(project(path: ":spark2"))
    implementation(project(path: ":spark3"))
    implementation(project(path: ":spark32"))
    implementation(project(path: ":spark33"))

    compileOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    compileOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
}


task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

test {
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

task integrationTest(type: Test) {
    retry {
        boolean isCiServer = System.getenv().containsKey("CI")
        if (isCiServer) {
            maxRetries = 3
            maxFailures = 3
        }
    }
    useJUnitPlatform {
        includeTags "integration-test"
    }
    dependsOn shadowJar
}

integrationTest.outputs.upToDateWhen { false }

javadoc {
    options.tags = [ "apiNote" ]
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

def reportsDir = "${buildDir}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file(coverageDir)
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-spark'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'openlineage-spark'
                description = 'OpenLineage Spark integration'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.groupId.text() == 'spark'
                }.each() {
                    it.parent().remove(it)
                }
            }

        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = isReleaseVersion ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2' :
                    'https://astronomer.jfrog.io/artifactory/maven-public-libs-snapshot'
            credentials {
                username = System.getenv('RELEASE_USERNAME')
                password = System.getenv('RELEASE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

shadowJar {
    minimize(){
        exclude (project(":shared"))
        exclude (project(":spark2"))
        exclude (project(":spark3"))
        exclude (project(":spark32"))
        exclude (project(":spark33"))
        exclude (project(":app"))
    }
    dependencies {
        exclude(dependency('org.slf4j::'))
    }
    classifier = ''
    // avoid conflict with any client version of that lib
    relocate 'com.github.ok2c.hc5', 'io.openlineage.spark.shaded.com.github.ok2c.hc5'
    relocate 'org.apache.httpcomponents.client5', 'io.openlineage.spark.shaded.org.apache.httpcomponents.client5'
    relocate 'javassist', 'io.openlineage.spark.shaded.javassist'
    relocate 'org.apache.hc', 'io.openlineage.spark.shaded.org.apache.hc'
    relocate 'org.apache.commons.codec', 'io.openlineage.spark.shaded.org.apache.commons.codec'
    relocate 'org.apache.commons.logging', 'io.openlineage.spark.shaded.org.apache.commons.logging'
    relocate 'org.apache.commons.beanutils', 'io.openlineage.spark.shaded.org.apache.commons.beanutils'
    relocate 'org.apache.http', 'io.openlineage.spark.shaded.org.apache.http'
    relocate 'org.yaml.snakeyaml', 'io.openlineage.spark.shaded.org.yaml.snakeyaml'
    relocate 'com.fasterxml.jackson', 'io.openlineage.spark.shaded.com.fasterxml.jackson'
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

assemble {
    dependsOn shadowJar
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/io/openlineage/spark/agent/")
        dir.mkdirs();
        new File("$buildDir/resources/main/io/openlineage/spark/agent/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}
