/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import groovy.io.FileType

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.12.1'
    }
}

plugins {
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.diffplug.spotless"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

archivesBaseName='openlineage-spark'

ext {
    assertjVersion = '3.20.2'
    junit5Version = '5.7.2'
    bytebuddyVersion = '1.10.21'
    sparkVersion = '2.4.7'
    jacksonVersion = '2.12.2'
    postgresqlVersion = '42.2.19'
    lombokVersion = '1.18.20'
    mockitoVersion = '3.11.2'
    testcontainersVersion = '1.15.3'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.javassist:javassist:3.27.0-GA'
    implementation 'com.github.ok2c.hc5:hc5-async-json:0.2.1'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compileOnly "org.apache.spark:spark-core_2.11:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql_2.11:${sparkVersion}"
    compileOnly 'com.google.cloud.spark:spark-bigquery_2.11:0.21.1'

    testImplementation 'com.google.cloud.spark:spark-bigquery-with-dependencies_2.11:0.19.1'
    testImplementation "net.bytebuddy:byte-buddy-agent:${bytebuddyVersion}"
    testImplementation "net.bytebuddy:byte-buddy-dep:${bytebuddyVersion}"
    testImplementation "org.apache.spark:spark-core_2.11:${sparkVersion}"
    testImplementation "org.apache.spark:spark-sql_2.11:${sparkVersion}"
    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation "org.postgresql:postgresql:${postgresqlVersion}"
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation('org.xerial:sqlite-jdbc:3.34.0')
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

test {
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
    useJUnitPlatform()
    forkEvery 1
    maxParallelForks 3
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true'
    ]
}

tasks.register("integrationTests", Test) {
    useJUnitPlatform {
        includeTags "integration-test"
    }
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            'marquez.image.tag': project.getProperty('marquez.image.tag'),
            'spark.version': project.getProperty('spark.version'),
            'openlineage.spark.jar': "${archivesBaseName}-${project.version}.jar"
    ]
    mustRunAfter shadowJar
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

def reportsDir = "${buildDir}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file(coverageDir)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-spark'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'openlineage-spark'
                description = 'Java library for OpenLineage'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = System.getenv('SONATYPE_NEXUS_USERNAME')
                password = System.getenv('SONATYPE_NEXUS_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

shadowJar {
    classifier = ''
    // avoid conflict with any client version of that lib
    relocate 'com.github.ok2c.hc5', 'openlinage.com.github.ok2c.hc5'
    relocate 'org.apache.httpcomponents.client5', 'openlineage.org.apache.httpcomponents.client5'
    relocate 'javassist', 'openlineage.javassist'
    relocate 'com.fasterxml.jackson', 'openlineage.com.fasterxml.jackson'

    manifest {
        attributes(
                "Premain-Class": 'openlineage.spark.agent.SparkAgent',
                "Agent-Class": 'openlineage.spark.agent.SparkAgent',
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

assemble {
    dependsOn shadowJar
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/openlineage/spark/agent/client/")
        dir.mkdirs();
        new File("$buildDir/resources/main/openlineage/spark/agent/client/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

task bumpVersionTestFiles() {
    doLast {
        def dir = new File(project.projectDir.path + '/integrations')
        dir.eachFileRecurse (FileType.FILES) { file ->
            ant.replace(file: file, token: "\$VERSION", value: project.version.toString())
        }
    }
}

classes {
    dependsOn createVersionProperties
}

test {
    dependsOn bumpVersionTestFiles
}