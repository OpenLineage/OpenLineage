import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id("java-library")
    id("com.github.johnrengelman.shadow")
    id("io.openlineage.common-config")
    id("io.openlineage.jar-verification")
    id("maven-publish")
    id("signing")
    id("jacoco")
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    scala = project.findProperty("scala.binary.version").toString()
    scalaFmt = scala.replace(".", "")
}

final def archiveBaseName = "openlineage-spark_${scala}"
final def activeRuntimeElementsConfiguration = "scala${scalaFmt}RuntimeElements"

dependencies {
    implementation(project(path: ":app"))
    implementation(project(path: ":shared", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":spark2"))
    implementation(project(path: ":spark3", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":spark31"))
    implementation(project(path: ":spark32", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":spark33", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":spark34", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":spark35", configuration: activeRuntimeElementsConfiguration))
    implementation(project(path: ":snowflake"))
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.tags = ["apiNote"]
}

def reportsDir = "${buildDir}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}

tasks.withType(Jar).configureEach {
    it.archiveBaseName = archiveBaseName
}

tasks.withType(GenerateModuleMetadata.class).configureEach {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "io.openlineage"
            artifactId = "openlineage-spark_${scala}"

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = "openlineage-spark_${scala}"
                description = "OpenLineage Spark integration for Scala binary version ${scala}"
                url = "https://github.com/OpenLineage/OpenLineage"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "openlineage"
                        name = "OpenLineage Project"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/OpenLineage/OpenLineage.git"
                    developerConnection = "scm:git:ssh://github.com:OpenLineage/OpenLineage.git"
                    url = "https://github.com/OpenLineage/OpenLineage"
                }
            }

            pom.withXml {
                asNode().dependencies."*".findAll() {
                    it.groupId.text() == "spark"
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = System.getenv("RELEASE_USERNAME")
                password = System.getenv("RELEASE_PASSWORD")
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

shadowJar {
    archiveClassifier = ""

    minimize() {
        exclude(project(path: ":app"))
        exclude(project(path: ":shared", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":spark2"))
        exclude(project(path: ":spark3", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":spark31"))
        exclude(project(path: ":spark32", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":spark33", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":spark34", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":spark35", configuration: activeRuntimeElementsConfiguration))
        exclude(project(path: ":snowflake"))
    }

    dependencies {
        exclude(dependency("org.slf4j::"))
        exclude("org/apache/commons/logging/**")
        exclude("io/openlineage/server/**")
    }

    relocate "com.github.ok2c.hc5", "io.openlineage.spark.shaded.com.github.ok2c.hc5"
    relocate "org.apache.httpcomponents.client5", "io.openlineage.spark.shaded.org.apache.httpcomponents.client5"
    relocate "javassist", "io.openlineage.spark.shaded.javassist"
    relocate "org.apache.hc", "io.openlineage.spark.shaded.org.apache.hc"
    relocate "org.apache.commons.codec", "io.openlineage.spark.shaded.org.apache.commons.codec"
    relocate "org.apache.commons.lang3", "io.openlineage.spark.shaded.org.apache.commons.lang3"
    relocate "org.apache.commons.beanutils", "io.openlineage.spark.shaded.org.apache.commons.beanutils"
    relocate "org.apache.http", "io.openlineage.spark.shaded.org.apache.http"
    relocate 'org.yaml.snakeyaml', 'io.openlineage.spark.shaded.org.yaml.snakeyaml'
    relocate "com.fasterxml.jackson", "io.openlineage.spark.shaded.com.fasterxml.jackson"
    relocate "org.LatencyUtils", "io.openlineage.spark.shaded.org.latencyutils"
    relocate "org.HdrHistogram", "io.openlineage.spark.shaded.org.hdrhistogram"
    manifest {
        attributes(
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Built-By": System.getProperty("user.name"),
                "Build-Jdk": System.getProperty("java.version"),
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
    zip64 true
}
