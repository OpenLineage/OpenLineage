/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/
package io.openlineage.spark.api.naming;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import io.openlineage.spark.agent.util.DatabricksUtils;
import io.openlineage.spark.api.OpenLineageContext;
import java.util.Optional;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class DatabricksApplicationJobNameProviderTest {
  private DatabricksApplicationJobNameProvider provider;

  private OpenLineageContext noSparkContextOlContext;
  private OpenLineageContext noWorkspaceUrlOlContext;
  private OpenLineageContext darabricksJobNameOlContext1;

  @BeforeEach
  void setUp() {
    provider = new DatabricksApplicationJobNameProvider();

    // Case 1: OpenLineage has no SparkContext set
    noSparkContextOlContext = mock(OpenLineageContext.class);
    when(noSparkContextOlContext.getSparkContext()).thenReturn(Optional.empty());

    // Case 2: No Glue variables in the context
    noWorkspaceUrlOlContext = buildOpenLineageContextWithEmptyConf();

    // Case 3: With Glue variables and autogenerated job name
    darabricksJobNameOlContext1 = buildOpenLineageContextWithDatabricksVariables();
  }

  @Test
  void isDefinedAt() {
    assertThat(provider.isDefinedAt(noSparkContextOlContext)).isFalse();
    assertThat(provider.isDefinedAt(noWorkspaceUrlOlContext)).isFalse();
    assertThat(provider.isDefinedAt(darabricksJobNameOlContext1)).isTrue();
  }

  @Test
  void getJobName() {
    assertThat(provider.getJobName(darabricksJobNameOlContext1)).isEqualTo("dbc-954f5d5f-34dd");
  }

  static OpenLineageContext buildOpenLineageContextWithEmptyConf() {
    OpenLineageContext openLineageContext = mock(OpenLineageContext.class);
    SparkContext sparkContext = mock(SparkContext.class);
    SparkConf conf = new SparkConf();
    when(sparkContext.getConf()).thenReturn(conf);
    when(openLineageContext.getSparkContext()).thenReturn(Optional.of(sparkContext));
    return openLineageContext;
  }

  static OpenLineageContext buildOpenLineageContextWithDatabricksVariables() {
    OpenLineageContext openLineageContext = mock(OpenLineageContext.class);
    SparkContext sparkContext = mock(SparkContext.class);
    SparkConf conf = new SparkConf();
    conf.set(
        DatabricksUtils.SPARK_DATABRICKS_WORKSPACE_URL,
        "https://dbc-954f5d5f-34dd.cloud.databricks.com/");
    when(sparkContext.getConf()).thenReturn(conf);
    when(openLineageContext.getApplicationName()).thenReturn("databricks_shell");
    when(openLineageContext.getSparkContext()).thenReturn(Optional.of(sparkContext));
    return openLineageContext;
  }
}
