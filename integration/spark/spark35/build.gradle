import org.apache.tools.ant.filters.ReplaceTokens
import groovy.io.FileType

import java.nio.file.Files


plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'com.diffplug.spotless' version '6.12.0'
    id "com.adarshr.test-logger" version "3.2.0"
    id "org.gradle.test-retry" version "1.5.8"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    dependsOn shadowJar
    reports {
        html.required = true
    }
}

pmdTest {
    dependsOn shadowJar
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://astronomer.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

archivesBaseName='openlineage-spark-spark3'

ext {
    assertjVersion = '3.25.1'
    junit5Version = '5.10.1'
    mockitoVersion = '4.11.0'
    sparkVersion = '3.5.0'
    scalaVersion = project.getProperty('scala.binary.version')
    jacksonVersion = '2.15.3'
    lombokVersion = '1.18.30'
    bigqueryVersion = '0.29.0'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(project(path: ":shared", configuration: "shadow"))
    implementation(project(":spark3"))

    compileOnly "org.apache.spark:spark-core_${scalaVersion}:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql_${scalaVersion}:${sparkVersion}"
    compileOnly "org.apache.spark:spark-hive_${scalaVersion}:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql-kafka-0-10_${scalaVersion}:${sparkVersion}"
    compileOnly "org.scala-lang.modules:scala-collection-compat_${scalaVersion}:2.11.0"
    compileOnly ("com.google.cloud.spark:spark-bigquery-with-dependencies_${scalaVersion}:${bigqueryVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.module'
        exclude group: 'com.sun.jmx'
        exclude group: 'com.sun.jdmk'
        exclude group: 'javax.jms'
    }

    testFixturesApi "com.fasterxml.jackson.module:jackson-module-scala_${scalaVersion}:${jacksonVersion}"
    testFixturesApi "org.apache.spark:spark-core_${scalaVersion}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-sql_${scalaVersion}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-hive_${scalaVersion}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-catalyst_${scalaVersion}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-sql-kafka-0-10_${scalaVersion}:${sparkVersion}"
    testFixturesApi "org.apache.iceberg:iceberg-spark-runtime-3.4_${scalaVersion}:1.3.1"


    testFixturesApi "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testFixturesApi "org.assertj:assertj-core:${assertjVersion}"
    testFixturesApi "org.mockito:mockito-core:${mockitoVersion}"
    testFixturesApi "org.mockito:mockito-inline:${mockitoVersion}"
    testFixturesApi "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testFixturesApi(project(path: ":shared", configuration: 'shadow'))
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 5
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
        'junit.platform.output.capture.stdout': 'true',
        'junit.platform.output.capture.stderr': 'true',
        'spark.version'                       : "${sparkVersion}",
        'openlineage.spark.jar'               : "${archivesBaseName}-${project.version}.jar",
        'kafka.package.version'               : "org.apache.spark:spark-sql-kafka-0-10_${scalaVersion}:${sparkVersion}",
        'mockserver.logLevel'                 : 'ERROR'
    ]

    classpath = project.sourceSets.test.runtimeClasspath
}


test {
    dependsOn shadowJar
    configure commonTestConfiguration
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

assemble {
    dependsOn shadowJar
}

compileTestJava {
    dependsOn(':shared:jar')
    dependsOn(':spark3:jar')
}

compileJava {
    dependsOn(':shared:jar')
    dependsOn(':spark3:jar')
}

shadowJar {
    dependsOn(':spark3:shadowJar')
    minimize()
    archiveClassifier = ''
    dependencies {
        exclude(dependency('org.slf4j::'))
    }
    zip64 true
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}