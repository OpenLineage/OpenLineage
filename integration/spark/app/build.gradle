import org.apache.tools.ant.filters.ReplaceTokens
import groovy.io.FileType

import java.nio.file.Files


plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'com.diffplug.spotless' version '5.12.1'
    id "com.adarshr.test-logger" version "2.1.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://datakin.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

configurations {
    lombok
    spark2.extendsFrom testImplementation
    spark3.extendsFrom testImplementation
    spark32.extendsFrom testImplementation
}

archivesBaseName='openlineage-spark-app'


ext {
    bigqueryVersion = '0.21.1'
    sparkVersion = project.getProperty('spark.version')
    postgresqlVersion = '42.2.19'
    mockitoVersion = '3.11.2'
    testcontainersVersion = '1.15.3'
    shortVersion = sparkVersion.substring(0,3)
    versionsMap = [
            "3.2": ["module": "spark32",    "scala": "2.12"],
            "3.1": ["module": "spark3",     "scala": "2.12"],
            "2.4": ["module": "spark2",     "scala": "2.11"]
    ]
    versions = versionsMap[shortVersion]
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(project(path: ":shared"))
    implementation(project(path: ":spark2"))
    implementation(project(path: ":spark3"))
    implementation(project(path: ":spark32"))
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'


    compileOnly "org.apache.spark:spark-core_${versions.scala}:${sparkVersion}"
    compileOnly "org.apache.spark:spark-sql_${versions.scala}:${sparkVersion}"
    compileOnly ("com.google.cloud.spark:spark-bigquery_${versions.scala}:${bigqueryVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.module'
    }

    testFixturesApi "org.apache.spark:spark-core_${versions.scala}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-sql_${versions.scala}:${sparkVersion}"
    testFixturesApi "org.apache.spark:spark-hive_${versions.scala}:${sparkVersion}"
    testFixturesApi 'commons-beanutils:commons-beanutils:1.9.3'
    testFixturesApi "org.apache.spark:spark-sql-kafka-0-10_${versions.scala}:${sparkVersion}"
    testFixturesApi("com.google.cloud.spark:spark-bigquery-with-dependencies_${versions.scala}:${bigqueryVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.module'
    }

    testImplementation(project(":${versions.module}"))
    testImplementation testFixtures(project(":${versions.module}")){
        exclude group: 'org.apache.avro'
    }
    testImplementation testFixtures(project(":shared"))

    lombok  "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 5
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            'spark.version'                       :  sparkVersion,
            'openlineage.spark.jar'               : "${archivesBaseName}-${project.version}.jar",
            'kafka.package.version'               : "org.apache.spark:spark-sql-kafka-0-10_${versions.scala}:${sparkVersion}",
            'mockserver.logLevel'                 : 'ERROR'
    ]

    classpath = project.sourceSets.test.runtimeClasspath
}

// wrócić do jednego test z jakąś metodą zwracającą konfigurację żeby spark3 działał
task sparkTest(type: Test) {
    useJUnitPlatform {i ->
        excludeTags ('integration-test')
        if(!sparkVersion.startsWith('3')) {excludeTags 'spark3'}
    }
    configure commonTestConfiguration
    classpath = project.sourceSets.test.runtimeClasspath + configurations."${versions.module}"
}

task copyDependencies(type: Copy) {
    // delete the dependencies directory so we don't accidentally mix Spark 2 and Spark 3 dependencies
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    delete layout.buildDirectory.dir("dependencies")
    def config = configurations."${versions.module}"
    from config.getFiles()
    include "*.jar"
    into layout.buildDirectory.dir("dependencies")
}

task integrationTest(type: Test) {
    dependsOn shadowJar, copyDependencies
    configure commonTestConfiguration
    useJUnitPlatform {
        includeTags "integration-test"
        if(!sparkVersion.startsWith('3')) {excludeTags 'spark3'}
    }


}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

assemble {
    dependsOn shadowJar
}

shadowJar {
    minimize(){
        exclude (project(":shared"))
        exclude (project(":spark2"))
        exclude (project(":spark3"))
        exclude (project(":spark32"))
    }
    classifier = ''
    // avoid conflict with any client version of that lib
    relocate 'com.github.ok2c.hc5', 'io.openlineage.spark.shaded.com.github.ok2c.hc5'
    relocate 'org.apache.httpcomponents.client5', 'io.openlineage.spark.shaded.org.apache.httpcomponents.client5'
    relocate 'javassist', 'io.openlineage.spark.shaded.javassist'
    relocate 'org.apache.hc', 'io.openlineage.spark.shaded.org.apache.hc'
    relocate 'org.apache.commons.codec', 'io.openlineage.spark.shaded.org.apache.commons.codec'
    relocate 'org.apache.commons.logging', 'io.openlineage.spark.shaded.org.apache.commons.logging'
    relocate 'org.apache.commons.beanutils', 'io.openlineage.spark.shaded.org.apache.commons.beanutils'
    relocate 'org.apache.http', 'io.openlineage.spark.shaded.org.apache.http'
    relocate 'org.yaml.snakeyaml', 'io.openlineage.spark.shaded.org.yaml.snakeyaml'
    relocate 'com.fasterxml.jackson', 'io.openlineage.spark.shaded.com.fasterxml.jackson'
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/io/openlineage/spark/agent/")
        dir.mkdirs();
        new File("$buildDir/resources/main/io/openlineage/spark/agent/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}
