/*
 * SPDX-License-Identifier: Apache-2.0.
 */

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.12.1'
    }
}

plugins {
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://datakin.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

configurations {
    lombok
}

apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.diffplug.spotless"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

archivesBaseName='openlineage-flink'

ext {
    flinkVersion = '1.14.2'
    assertjVersion = '3.20.2'
    junit5Version = '5.7.2'
    jacksonVersion = '2.6.7'
    jacksonDatatypeVersion = '2.6.7'
    jacksonDatabindVersion = '2.6.7.3'
    lombokVersion = '1.18.20'
    mockitoVersion = '3.11.2'
    testcontainersVersion = '1.15.3'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation("io.openlineage:openlineage-java:${project.version}"){
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }

    implementation "org.apache.flink:flink-java:$flinkVersion"
    implementation "org.apache.flink:flink-streaming-java_2.12:$flinkVersion"
    implementation "org.apache.flink:flink-runtime-web_2.12:$flinkVersion"
    implementation "org.apache.flink:flink-connector-kafka_2.12:$flinkVersion"

    implementation 'org.javassist:javassist:3.27.0-GA'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'
    implementation ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeVersion}"){
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"

    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "org.testcontainers:mockserver:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation 'org.mock-server:mockserver-client-java:5.12.0'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.1.1'
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.mockito:mockito-inline:${mockitoVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompile "org.projectlombok:lombok:${lombokVersion}"

    lombok  "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

sourceSets {
    main.java.srcDirs = ["src/main/java"]
    test.java.srcDirs = ["src/test/java"]
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 3
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            '.flink.jar': "${archivesBaseName}-${project.version}.jar",
    ]
    classpath =  project.sourceSets.test.runtimeClasspath
}

test {
    configure commonTestConfiguration
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

task integrationTest(type: Test) {
    configure commonTestConfiguration
    useJUnitPlatform {
        includeTags "integration-test"
    }
    dependsOn shadowJar
}

integrationTest.outputs.upToDateWhen { false }

javadoc {
    options.tags = [ "apiNote" ]
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

def reportsDir = "${buildDir}/reports"
def coverageDir = "${reportsDir}/coverage"

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file(coverageDir)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-flink'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'openlineage-flink'
                description = 'OpenLineage integration with Flink'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = isReleaseVersion ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2' :
                    'https://datakin.jfrog.io/artifactory/maven-public-libs-snapshot'
            credentials {
                username = System.getenv('RELEASE_USERNAME')
                password = System.getenv('RELEASE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

shadowJar {
    minimize()
    classifier = ''
    // avoid conflict with any client version of that lib
    relocate 'com.github.ok2c.hc5', 'openlineage.com.github.ok2c.hc5'
    relocate 'org.apache.httpcomponents.client5', 'openlineage.org.apache.httpcomponents.client5'
    relocate 'javassist', 'openlineage.javassist'
    relocate 'org.apache.hc', 'openlineage.hc'
    relocate 'com.fasterxml.jackson.datatype.jsr310', 'openlineage.jackson.datatype.jsr310'
    relocate 'org.apache.commons.codec', 'openlineage.commons.codec'
    dependencies {
        exclude(dependency('org.slf4j::'))
    }

    manifest {
        attributes(
                "Premain-Class": 'io.openlineage.flink.OpenLineageFlinkJobListener',
                "Agent-Class": 'io.openlineage.flink.OpenLineageFlinkJobListener',
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

assemble {
    dependsOn shadowJar
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/io/openlineage/flink/agent/client/")
        dir.mkdirs()
        new File("$buildDir/resources/main/io/openlineage/flink/agent/client/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}
