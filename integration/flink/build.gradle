/*
/* Copyright 2018-2023 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "com.adarshr.test-logger" version "3.2.0"
    id 'com.diffplug.spotless' version '6.25.0'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "pmd"
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    dependsOn shadowJar
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://packages.confluent.io/maven/"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

archivesBaseName='openlineage-flink'

ext {
    flinkVersion = project.getProperty('flink.version')
    flinkVersionShort = flinkVersion.substring(0,4)
}

dependencies {
    implementation(project(path: ":app"))
    implementation(project(path: ":shared"))
    implementation(project(path: ":flink115"))
    implementation(project(path: ":flink117"))
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 3
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            '.flink.jar': "${archivesBaseName}-${project.version}.jar",
    ]
    classpath =  project.sourceSets.test.runtimeClasspath
}

test {
    configure commonTestConfiguration
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

def reportsDir = "${buildDir}/reports"
def coverageDir = "${reportsDir}/coverage"

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-flink'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'openlineage-flink'
                description = 'OpenLineage integration with Flink'
                url = 'https://github.com/OpenLineage/OpenLineage'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openlineage'
                        name = 'OpenLineage Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/OpenLineage/OpenLineage.git'
                    developerConnection = 'scm:git:ssh://github.com:OpenLineage/OpenLineage.git'
                    url = 'https://github.com/OpenLineage/OpenLineage'
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = System.getenv('RELEASE_USERNAME')
                password = System.getenv('RELEASE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

shadowJar {
    minimize()
    archiveClassifier = ''
    // avoid conflict with any client version of that lib
    relocate 'com.fasterxml.jackson', 'io.openlineage.flink.shaded.com.fasterxml.jackson'
    relocate 'com.github.ok2c.hc5', 'io.openlineage.flink.shaded.com.github.ok2c.hc5'
    relocate 'org.apache.httpcomponents.client5', 'io.openlineage.flink.shaded.org.apache.httpcomponents.client5'
    relocate 'org.apache.http', 'io.openlineage.flink.shaded.org.apache.http'
    relocate 'javassist', 'io.openlineage.flink.shaded.javassist'
    relocate 'org.yaml', 'io.openlineage.flink.shaded.org.yaml'
    relocate 'org.apache.hc', 'io.openlineage.flink.shaded.org.apache.hc'
    relocate 'org.apache.commons.codec', 'io.openlineage.flink.shaded.org.apache.commons.codec'
    dependencies {
        exclude(dependency('org.slf4j::'))
    }

    archiveClassifier = ''
    exclude 'org/apache/commons/logging/**'

    manifest {
        attributes(
                "Premain-Class": 'io.openlineage.flink.OpenLineageFlinkJobListener',
                "Agent-Class": 'io.openlineage.flink.OpenLineageFlinkJobListener',
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    zip64 true
}

assemble {
    dependsOn shadowJar
}

spotlessJava {
    dependsOn("compileJava", "compileTestJava", ":examples:stateful:generateAvroJava")
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/io/openlineage/flink/client/")
        dir.mkdirs()
        new File("$buildDir/resources/main/io/openlineage/flink/client/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}
