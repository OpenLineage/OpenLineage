/*
/* Copyright 2018-2023 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

import org.apache.tools.ant.filters.ReplaceTokens
import io.franzbecker.gradle.lombok.task.DelombokTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "com.adarshr.test-logger" version "3.2.0"
    id 'com.diffplug.spotless' version '6.25.0'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "pmd"
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    dependsOn shadowJar
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://packages.confluent.io/maven/"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

final def fixturesDir = layout.buildDirectory.dir("fixtures")

configurations {
    fixturesJar {
        canBeResolved = true
    }
}

archivesBaseName='openlineage-flink-app'

ext {
    flinkVersion = project.getProperty('flink.version')
    flinkVersionShort = flinkVersion.substring(0,4)
    assertjVersion = '3.25.3'
    junit5Version = '5.10.2'
    lombokVersion = '1.18.30'
    jacksonVersion = "2.15.3"
    mockitoVersion = '5.2.0'
    testcontainersVersion = '1.19.4'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

dependencies {
    fixturesJar(project(path: ':examples:stateful', configuration: 'shadow'))
    implementation(project(path: ":shared"))
    implementation(project(path: ":flink115"))
    implementation(project(path: ":flink117"))
    api "io.openlineage:openlineage-java:${project.version}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.apache.flink:flink-java:$flinkVersion"
    compileOnly "org.apache.flink:flink-streaming-java:$flinkVersion"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'

    testImplementation "org.apache.flink:flink-java:$flinkVersion"
    testImplementation "org.apache.flink:flink-streaming-java:$flinkVersion"
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "org.testcontainers:mockserver:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation 'org.mock-server:mockserver-client-java:5.12.0'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'
    testImplementation 'com.github.tomakehurst:wiremock:3.0.1'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.22.1'

    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.register("copyIntegrationTestFixtures", Copy) {
    group = "copy"
    description = "Copies integration test fixtures to the build directory"
    from(configurations.named("fixturesJar"))
    into(fixturesDir)
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 3
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            '.flink.jar': "${archivesBaseName}-${project.version}.jar",
    ]
    classpath =  project.sourceSets.test.runtimeClasspath
}

test {
    configure commonTestConfiguration
    useJUnitPlatform {
        excludeTags 'integration-test'
    }
}

def integrationTestConfiguration = {
    forkEvery 1
    maxParallelForks 1
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'flink.version': "${flinkVersion}",
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            '.flink.jar': "${archivesBaseName}-${project.version}.jar",
            'fixtures.dir': fixturesDir.get().asFile.absolutePath
    ]
    classpath =  project.sourceSets.test.runtimeClasspath
}

task integrationTest(type: Test) {
    configure integrationTestConfiguration
    useJUnitPlatform {
        includeTags "integration-test"
    }
    dependsOn copyIntegrationTestFixtures

}

integrationTest.outputs.upToDateWhen { false }

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    options.tags = [ "apiNote" ]
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}

def reportsDir = "${buildDir}/reports"
def coverageDir = "${reportsDir}/coverage"

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}

spotlessJava {
    dependsOn("compileJava", "compileTestJava")
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        File dir = new File("$buildDir/resources/main/io/openlineage/flink/client/")
        dir.mkdirs()
        new File("$buildDir/resources/main/io/openlineage/flink/client/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}
