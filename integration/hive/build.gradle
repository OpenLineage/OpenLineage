/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.13.0'
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
    id 'pmd'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'io.openlineage'
archivesBaseName='openlineage-hive'

ext {
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
}

repositories {
    mavenCentral()
    mavenLocal()

    mavenCentral() {
        metadataSources { artifact() }
    }
}

dependencies {
    implementation project(path: ':hive-openlineage-hook', configuration: 'shadow')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'pmd'
    repositories {
        mavenCentral()
        mavenLocal()

        // FIXME: We use this repo to only download the JAR because hive-bigquery-connector:2.0.3
        //  has some incorrect metadata in its POMs. This will be fixed in a future release of the
        //  connector.
        mavenCentral() {
            metadataSources { artifact() }
        }
    }
    pmd {
        consoleOutput = true
        toolVersion = "6.46.0"
        rulesMinimumPriority = 5
        ruleSetFiles = rootProject.files("pmd-config.xml")
        ruleSets = []
        ignoreFailures = false
    }
    pmdMain {
        reports {
            html.required = true
        }
    }
    spotless {
        java {
            target("src/**/*.java")
            googleJavaFormat()
            removeUnusedImports()
            licenseHeader("""/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/""")
        }
    }
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.tags = ["apiNote"]
}

def reportsDir = "${buildDir}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "io.openlineage"
            artifactId = "openlineage-hive"

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = "openlineage-hive"
                description = "OpenLineage Hive integration"
                url = "https://github.com/OpenLineage/OpenLineage"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "openlineage"
                        name = "OpenLineage Project"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/OpenLineage/OpenLineage.git"
                    developerConnection = "scm:git:ssh://github.com:OpenLineage/OpenLineage.git"
                    url = "https://github.com/OpenLineage/OpenLineage"
                }
            }

            pom.withXml {
                asNode().dependencies."*".findAll() {
                    it.groupId.text() == "hive"
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }
}


nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('RELEASE_USERNAME')
            password = System.getenv('RELEASE_PASSWORD')
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenJava
}

shadowJar {
    archiveClassifier = ""

    minimize() {
        exclude(project(path: ":hive-openlineage-hook"))
    }

    manifest {
        attributes(
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Built-By": System.getProperty("user.name"),
                "Build-Jdk": System.getProperty("java.version"),
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
    zip64 true
}
