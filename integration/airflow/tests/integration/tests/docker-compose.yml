version: "3.7"

x-airflow-base: &airflow-base
  build:
    context: ../../../../../
    target: airflow
    dockerfile: integration/airflow/tests/integration/Dockerfile
    args:
      AIRFLOW_IMAGE: ${AIRFLOW_IMAGE}
      AIRFLOW_UID: ${AIRFLOW_UID}
  environment: &airflow-common-env
    DB_BACKEND: postgresql+psycopg2
    DB_HOST: postgres
    DB_PORT: 5432
    AIRFLOW_DATABASE_HOST: postgres
    AIRFLOW_DATABASE_NAME: airflow
    AIRFLOW_DATABASE_USERNAME: airflow
    AIRFLOW_DATABASE_PASSWORD: airflow
    AIRFLOW_FERNET_KEY: Z2uDm0ZL60fXNkEXG8LW99Ki2zf8wkmIltaTz1iQPDU=
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__LOGGING_CONFIG_CLASS: log_config.LOGGING_CONFIG
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 120
    AIRFLOW__LINEAGE__BACKEND: openlineage.lineage_backend.OpenLineageBackend
    AIRFLOW_CONN_MYSQL_CONN: mysql://food_delivery:food_delivery@mysql:3306/food_delivery
    AIRFLOW_CONN_TRINO_CONN: trino://trino@trino:8080/default?catalog=memory
    AIRFLOW_CONN_BQ_CONN: google-cloud-platform://?extra__google_cloud_platform__project=openlineage-ci&extra__google_cloud_platform__key_path=%2Fopt%2Fconfig%2Fgcloud%2Fgcloud-service-key.json
    AIRFLOW_CONN_GCS_CONN: google-cloud-platform://?extra__google_cloud_platform__key_path=%2Fopt%2Fconfig%2Fgcloud%2Fgcloud-service-key.json
    GOOGLE_CLOUD_STORAGE_SOURCE_URI: ${GOOGLE_CLOUD_STORAGE_SOURCE_URI}
    GOOGLE_CLOUD_STORAGE_DESTINATION_URI: ${GOOGLE_CLOUD_STORAGE_DESTINATION_URI}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${DAGS_ARE_PAUSED_AT_CREATION:-False}
    BIGQUERY_PREFIX: ${BIGQUERY_PREFIX}
    DBT_DATASET_PREFIX: ${DBT_DATASET_PREFIX}_dbt
    GOOGLE_APPLICATION_CREDENTIALS: /opt/config/gcloud/gcloud-service-key.json
    OPENLINEAGE_AIRFLOW_DISABLE_SOURCE_CODE: "false"
    OPENLINEAGE_URL: http://backend:5000
    OPENLINEAGE_NAMESPACE: food_delivery
    OPENLINEAGE_EXTRACTORS: custom_extractor.CustomExtractor
    SNOWFLAKE_AIRFLOW_TEST_VERSION: 2.3.4  # bump this when moving to new Airflow version - only single process can test Snowflake now
    SNOWFLAKE_ACCOUNT_ID: ${SNOWFLAKE_ACCOUNT_ID}
    SNOWFLAKE_USER: ${SNOWFLAKE_USER}
    SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    AWS_ATHENA_OUTPUT_LOCATION: ${AWS_ATHENA_OUTPUT_LOCATION}
    AWS_ATHENA_SUFFIX: ${AWS_ATHENA_SUFFIX}
    AIRFLOW__SECRETS__BACKEND: airflow.secrets.local_filesystem.LocalFilesystemBackend
    AIRFLOW__SECRETS__BACKEND_KWARGS: '{ "connections_file_path": "/opt/data/secrets/connections.json", "variables_file_path": "/opt/data/secrets/variables.json" }'
    AIRFLOW_CONN_SNOWFLAKE_CONN: "snowflake://${SNOWFLAKE_USER}:${SNOWFLAKE_PASSWORD}@${SNOWFLAKE_URI}/OPENLINEAGE?account=${SNOWFLAKE_ACCOUNT_ID}&database=SANDBOX&region=us-east-1&warehouse=ROBOTS&role=OPENLINEAGE"
    AIRFLOW_CONN_AWS_CONN: "aws://"
    AIRFLOW_CONN_AWS_LOCAL_CONN: "aws://?aws_access_key_id=k&aws_secret_access_key=v&endpoint_url=http%3A%2F%2Flocalstack%3A4566"
    AIRFLOW_CONN_SFTP_CONN: sftp://airflow:airflow@openssh-server:2222
    AIRFLOW_CONN_FTP_CONN: ftp://airflow:airflow@pure-ftpd:21
  volumes:
      - ./airflow/config/log_config.py:/opt/airflow/config/log_config.py
      - $PWD/airflow/logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags
      - ../gcloud:/opt/config/gcloud
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    mysql:
      condition: service_healthy
    trino:
      condition: service_healthy
    openssh-server:
      condition: service_healthy
    backend:
      condition: service_healthy
    localstack:
      condition: service_healthy
    pure-ftpd:
      condition: service_started

services:
  integration:
    build:
      context: ../../../../../
      target: integration
      dockerfile: integration/airflow/tests/integration/Dockerfile
      args:
        AIRFLOW_IMAGE: ${AIRFLOW_IMAGE}
    environment:
      BIGQUERY_PREFIX: ${BIGQUERY_PREFIX}
      DBT_DATASET_PREFIX: ${DBT_DATASET_PREFIX}_dbt
      AIRFLOW_VERSION: ${AIRFLOW_VERSION}
      SNOWFLAKE_ACCOUNT_ID: ${SNOWFLAKE_ACCOUNT_ID}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ATHENA_OUTPUT_LOCATION: ${AWS_ATHENA_OUTPUT_LOCATION}
      AWS_ATHENA_SUFFIX: ${AWS_ATHENA_SUFFIX}
      AIRFLOW_CONN_AWS_LOCAL_CONN: ${AIRFLOW_CONN_AWS_LOCAL_CONN}
      GOOGLE_CLOUD_STORAGE_SOURCE_URI: ${GOOGLE_CLOUD_STORAGE_SOURCE_URI}
      GOOGLE_CLOUD_STORAGE_DESTINATION_URI: ${GOOGLE_CLOUD_STORAGE_DESTINATION_URI}
    networks:
      - app_net
    volumes:
      - ../docker/wait-for-it.sh:/wait-for-it.sh
      - ../gcloud:/opt/config/gcloud
    depends_on:
      - airflow_scheduler
      - airflow_worker
      - airflow_triggerer
      - backend
    entrypoint: ["/wait-for-it.sh", "backend:5000", "--", "python", '-m', 'pytest', 'test_integration.py']

  airflow_scheduler:
    <<: *airflow-base
    command: scheduler
    networks:
      - app_net
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_triggerer:
    <<: *airflow-base
    command: triggerer
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_worker:
    <<: *airflow-base
    hostname: airflow-worker
    command: celery worker
    networks:
      app_net:
        ipv4_address: 172.16.238.100
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow:
    profiles:
      - dev
    <<: *airflow-base
    command: webserver
    networks:
      - app_net
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  backend:
    build:
      context: ../server
    environment:
      - FLASK_APP=app.py
      - FLASK_RUN_PORT=5000
      - SERVER_EVENTS=/opt/airflow/events
    networks:
      - app_net
    volumes:
      - $PWD/events:/opt/airflow/events
    healthcheck:
      test: [ "CMD-SHELL", 'curl -X GET http://localhost:5000/healthcheck' ]


  airflow_init:
    <<: *airflow-base
    command: -c "/entrypoint airflow db upgrade && airflow users create --username airflow --password airflow --firstname airflow --lastname airflow --email airflow@example.com --role Admin"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    networks:
      - app_net
    depends_on:
      - postgres
    entrypoint: ["/opt/data/wait-for-it.sh", "postgres:5432", "--", "/bin/bash"]

  redis:
    image: redis:latest
    networks:
      - app_net
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  postgres:
    image: bitnami/postgresql:12.1.0
    networks:
      - app_net
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - AIRFLOW_USER=airflow
      - AIRFLOW_PASSWORD=airflow
      - AIRFLOW_DB=airflow
      - FOOD_DELIVERY_USER=food_delivery
      - FOOD_DELIVERY_PASSWORD=food_delivery
      - FOOD_DELIVERY_DB=food_delivery
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    volumes:
      - ../docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  mysql:
    image: mysql:8
    networks:
      - app_net
    ports:
      - "3306:3306"
    environment:
      - MYSQL_USER=food_delivery
      - MYSQL_PASSWORD=food_delivery
      - MYSQL_DATABASE=food_delivery
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_ONETIME_PASSWORD=
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - ../docker/init-db-mysql.sh:/docker-entrypoint-initdb.d/init-db-mysql.sh

  trino:
    image: trinodb/trino:403
    networks:
      - app_net
    expose:
      - 8080
    healthcheck:
      test: ["CMD", "/usr/lib/trino/bin/health-check"]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - ../docker/catalog:/etc/trino/catalog
    depends_on:
      - postgres

  openssh-server:
    image: linuxserver/openssh-server:latest
    networks:
      app_net:
        ipv4_address: 172.16.238.10
    ports:
      - "2222:2222"
    environment:
      - USER_PASSWORD=airflow
      - USER_NAME=airflow
      - PASSWORD_ACCESS=true
    healthcheck:
      test: ["CMD", "s6-svstat", "/run/service/svc-openssh-server"]
      interval: 5s
      timeout: 30s
      retries: 50

  localstack:
    image: localstack/localstack
    networks:
      - app_net
    expose:
      - 4566
    volumes:
      - ../docker/s3/create-bucket.sh:/etc/localstack/init/ready.d/init-aws.sh
    healthcheck:
      test: ["CMD", "awslocal", "s3api", "list-buckets"]
      interval: 5s
      timeout: 30s
      retries: 50

  pure-ftpd:
    image: stilliard/pure-ftpd
    networks:
      - app_net
    expose:
      - 21
    environment:
      PUBLICHOST: localhost
      FTP_USER_NAME: airflow
      FTP_USER_PASS: airflow
      FTP_USER_HOME: /home/airflow
    restart: always

networks:
  app_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.1
