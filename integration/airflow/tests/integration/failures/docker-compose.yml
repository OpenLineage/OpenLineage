version: "3.7"

x-airflow-common: &airflow-common
  build:
    context: ../../../../..
    target: airflow
    dockerfile: integration/airflow/tests/integration/Dockerfile
    args:
      AIRFLOW_IMAGE: ${AIRFLOW_IMAGE}
  environment: &airflow-common-env
    DB_BACKEND: postgresql+psycopg2
    DB_HOST: postgres
    DB_PORT: 5432
    _AIRFLOW_WWW_USER_USERNAME: airflow
    _AIRFLOW_WWW_USER_PASSWORD: airflow
    AIRFLOW_DATABASE_HOST: postgres
    AIRFLOW_DATABASE_NAME: airflow
    AIRFLOW_DATABASE_USERNAME: airflow
    AIRFLOW_DATABASE_PASSWORD: airflow
    AIRFLOW_FERNET_KEY: Z2uDm0ZL60fXNkEXG8LW99Ki2zf8wkmIltaTz1iQPDU=
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 120
    AIRFLOW__LINEAGE__BACKEND: openlineage.lineage_backend.OpenLineageBackend
    AIRFLOW_CONN_FOOD_DELIVERY_DB: postgres://food_delivery:food_delivery@postgres:5432/food_delivery
    AIRFLOW_CONN_BQ_CONN: google-cloud-platform://?extra__google_cloud_platform__project=openlineage-ci&extra__google_cloud_platform__key_path=%2Fopt%2Fconfig%2Fgcloud%2Fgcloud-service-key.json
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
    GOOGLE_APPLICATION_CREDENTIALS: /opt/config/gcloud/gcloud-service-key.json
    OPENLINEAGE_URL: ${OPENLINEAGE_URL}
    OPENLINEAGE_NAMESPACE: food_delivery
  volumes:
      - ./airflow/config/log_config.py:/opt/airflow/config/log_config.py
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  integration:
    build:
      context: ../../../../../
      target: integration
      dockerfile: integration/airflow/tests/integration/Dockerfile
      args:
        AIRFLOW_IMAGE: ${AIRFLOW_IMAGE}
    volumes:
      - ../docker/wait-for-it.sh:/wait-for-it.sh
    depends_on:
      airflow_scheduler:
        condition: service_started
      airflow_worker:
        condition: service_started
      airflow:
        condition: service_healthy
      backend:
        condition: service_started
    entrypoint: ["/wait-for-it.sh", "backend:5000", "--", "python", '-m', 'pytest', 'test_failure.py']

  airflow:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 60s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  backend:
    build:
      context: ../server
    environment:
      - FLASK_APP=app.py
      - FLASK_RUN_PORT=5000
      - SERVER_EVENTS=/opt/airflow/events
    volumes:
      - $PWD/events:/opt/airflow/events

  airflow_init:
    <<: *airflow-common
    command: -c "/entrypoint airflow db upgrade && airflow users create --username airflow --password airflow --firstname airflow --lastname airflow --email airflow@example.com --role Admin"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    depends_on:
      - postgres
    entrypoint: ["/opt/data/wait-for-it.sh", "postgres:5432", "--", "/bin/bash"]

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  postgres:
    image: bitnami/postgresql:12.1.0
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - AIRFLOW_USER=airflow
      - AIRFLOW_PASSWORD=airflow
      - AIRFLOW_DB=airflow
      - FOOD_DELIVERY_USER=food_delivery
      - FOOD_DELIVERY_PASSWORD=food_delivery
      - FOOD_DELIVERY_DB=food_delivery
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    volumes:
      - ../docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
